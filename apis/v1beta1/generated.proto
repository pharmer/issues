/*
Copyright 2019 The Pharmer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.pharmer.pharmer.apis.v1beta1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "v1beta1";

message RawExtension {
  // Raw is the underlying serialization of this object.
  // 
  // TODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.
  optional bytes raw = 1 [(gogoproto.customname) = "Raw"];
}

message APIEndpoint {
  // The hostname on which the API server is serving.
  optional string host = 1 [(gogoproto.customname) = "Host", (gogoproto.nullable) = false];

  // The port on which the API server is serving.
  optional int64 port = 2 [(gogoproto.customname) = "Port", (gogoproto.nullable) = false];
}

message Cluster {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional ClusterSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional ClusterStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

message ClusterNetworkingConfig {
  // The network ranges from which service VIPs are allocated.
  optional NetworkRanges services = 1 [(gogoproto.customname) = "Services", (gogoproto.nullable) = false];

  // The network ranges from which Pod networks are allocated.
  optional NetworkRanges pods = 2 [(gogoproto.customname) = "Pods", (gogoproto.nullable) = false];

  // Domain name for services.
  optional string serviceDomain = 3 [(gogoproto.customname) = "ServiceDomain", (gogoproto.nullable) = false];
}

message ClusterSpec {
  // Cluster network configuration
  optional ClusterNetworkingConfig clusterNetwork = 1 [(gogoproto.customname) = "ClusterNetwork", (gogoproto.nullable) = false];

  // Provider-specific serialized configuration to use during
  // cluster creation. It is recommended that providers maintain
  // their own versioned API types that should be
  // serialized/deserialized from this field.
  // +optional
  optional ProviderSpec providerSpec = 2 [(gogoproto.customname) = "ProviderSpec", (gogoproto.nullable) = false];
}

message ClusterStatus {
  // APIEndpoint represents the endpoint to communicate with the IP.
  // +optional
  repeated APIEndpoint apiEndpoints = 1 [(gogoproto.customname) = "APIEndpoints", (gogoproto.nullable) = false];

  // If set, indicates that there is a problem reconciling the
  // state, and will be set to a token value suitable for
  // programmatic interpretation.
  // +optional
  optional string errorReason = 2 [(gogoproto.casttype) = "sigs.k8s.io/cluster-api/pkg/apis/cluster/common.ClusterStatusError", (gogoproto.customname) = "ErrorReason", (gogoproto.nullable) = false];

  // If set, indicates that there is a problem reconciling the
  // state, and will be set to a descriptive error message.
  // +optional
  optional string errorMessage = 3 [(gogoproto.customname) = "ErrorMessage", (gogoproto.nullable) = false];

  // Provider-specific status.
  // It is recommended that providers maintain their
  // own versioned API types that should be
  // serialized/deserialized from this field.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.RawExtension providerStatus = 4 [(gogoproto.customname) = "ProviderStatus"];
}

message MachineClassRef {
  // +optional
  optional k8s.io.api.core.v1.ObjectReference objectReference = 1 [(gogoproto.customname) = "ObjectReference"];

  // Provider is the name of the cloud-provider which MachineClass is intended for.
  // +optional
  optional string provider = 2 [(gogoproto.customname) = "Provider", (gogoproto.nullable) = false];
}

message NetworkRanges {
  repeated string cidrBlocks = 1 [(gogoproto.customname) = "CIDRBlocks"];
}

message ProviderSpec {
  // Value is an inlined, serialized representation of the resource
  // configuration. It is recommended that providers maintain their own
  // versioned API types that should be serialized/deserialized from this
  // field, akin to component config.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.RawExtension value = 1 [(gogoproto.customname) = "Value"];

  // Source for the provider configuration. Cannot be used if value is
  // not empty.
  // +optional
  optional ProviderSpecSource valueFrom = 2 [(gogoproto.customname) = "ValueFrom"];
}

message ProviderSpecSource {
  // The machine class from which the provider config should be sourced.
  // +optional
  optional MachineClassRef machineClass = 1 [(gogoproto.customname) = "MachineClass"];
}

message API {
  // AdvertiseAddress sets the address for the API server to advertise.
  optional string advertiseAddress = 1 [(gogoproto.customname) = "AdvertiseAddress", (gogoproto.nullable) = false];

  // BindPort sets the secure port for the API Server to bind to
  optional int32 bindPort = 2 [(gogoproto.customname) = "BindPort", (gogoproto.nullable) = false];
}

message AWSResourceReference {
  // ID of resource
  // +optional
  optional string id = 1 [(gogoproto.customname) = "ID"];

  // ARN of resource
  // +optional
  optional string arn = 2 [(gogoproto.customname) = "ARN"];

  // Filters is a set of key/value pairs used to identify a resource
  // They are applied according to the rules defined by the AWS API:
  // https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html
  // +optional
  repeated Filter filters = 3 [(gogoproto.customname) = "Filters", (gogoproto.nullable) = false];
}

message AWSSpec {
  // aws:TAG KubernetesCluster => clusterid
  optional string iamProfileMaster = 1 [(gogoproto.customname) = "IAMProfileMaster", (gogoproto.nullable) = false];

  optional string iamProfileNode = 2 [(gogoproto.customname) = "IAMProfileNode", (gogoproto.nullable) = false];

  optional string masterSGName = 3 [(gogoproto.customname) = "MasterSGName", (gogoproto.nullable) = false];

  optional string nodeSGName = 4 [(gogoproto.customname) = "NodeSGName", (gogoproto.nullable) = false];

  optional string vpcCIDR = 5 [(gogoproto.customname) = "VpcCIDR", (gogoproto.nullable) = false];

  optional string vpcCIDRBase = 6 [(gogoproto.customname) = "VpcCIDRBase", (gogoproto.nullable) = false];

  optional string masterIPSuffix = 7 [(gogoproto.customname) = "MasterIPSuffix", (gogoproto.nullable) = false];

  optional string subnetCidr = 8 [(gogoproto.customname) = "SubnetCIDR", (gogoproto.nullable) = false];
}

message Action {
  optional string action = 1 [(gogoproto.casttype) = "ActionType", (gogoproto.customname) = "Action", (gogoproto.nullable) = false];

  optional string resource = 2 [(gogoproto.customname) = "Resource", (gogoproto.nullable) = false];

  optional string message = 3 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];
}

message AzureSpec {
  optional string instanceImageVersion = 1 [(gogoproto.customname) = "InstanceImageVersion", (gogoproto.nullable) = false];

  optional string rootPassword = 2 [(gogoproto.customname) = "RootPassword", (gogoproto.nullable) = false];

  optional string subnetCidr = 3 [(gogoproto.customname) = "SubnetCIDR", (gogoproto.nullable) = false];

  optional string resourceGroup = 4 [(gogoproto.customname) = "ResourceGroup", (gogoproto.nullable) = false];

  optional string subnetName = 5 [(gogoproto.customname) = "SubnetName", (gogoproto.nullable) = false];

  optional string securityGroupName = 6 [(gogoproto.customname) = "SecurityGroupName", (gogoproto.nullable) = false];

  optional string vnetName = 7 [(gogoproto.customname) = "VnetName", (gogoproto.nullable) = false];

  optional string routeTableName = 8 [(gogoproto.customname) = "RouteTableName", (gogoproto.nullable) = false];

  optional string azureStorageAccountName = 9 [(gogoproto.customname) = "StorageAccountName", (gogoproto.nullable) = false];
}

message AzureStorageSpec {
  optional string container = 1 [(gogoproto.customname) = "Container", (gogoproto.nullable) = false];

  optional string prefix = 2 [(gogoproto.customname) = "Prefix", (gogoproto.nullable) = false];
}

message CloudSpec {
  optional string cloudProvider = 1 [(gogoproto.customname) = "CloudProvider", (gogoproto.nullable) = false];

  optional string project = 2 [(gogoproto.customname) = "Project", (gogoproto.nullable) = false];

  optional string region = 3 [(gogoproto.customname) = "Region", (gogoproto.nullable) = false];

  optional string zone = 4 [(gogoproto.customname) = "Zone", (gogoproto.nullable) = false];

  // master needs it for ossec
  optional string instanceImage = 5 [(gogoproto.customname) = "InstanceImage", (gogoproto.nullable) = false];

  optional string os = 6 [(gogoproto.customname) = "OS", (gogoproto.nullable) = false];

  optional string instanceImageProject = 7 [(gogoproto.customname) = "InstanceImageProject", (gogoproto.nullable) = false];

  optional string networkProvider = 8 [(gogoproto.customname) = "NetworkProvider", (gogoproto.nullable) = false];

  // kubenet, flannel, calico, opencontrail
  optional string ccmCredentialName = 9 [(gogoproto.customname) = "CCMCredentialName", (gogoproto.nullable) = false];

  optional string sshKeyName = 10 [(gogoproto.customname) = "SSHKeyName", (gogoproto.nullable) = false];

  optional AWSSpec aws = 11 [(gogoproto.customname) = "AWS"];

  optional GoogleSpec gce = 12 [(gogoproto.customname) = "GCE"];

  optional AzureSpec azure = 13 [(gogoproto.customname) = "Azure"];

  optional LinodeSpec linode = 14 [(gogoproto.customname) = "Linode"];

  optional GKESpec gke = 15 [(gogoproto.customname) = "GKE"];
}

message CloudStatus {
  optional string sshKeyExternalID = 1 [(gogoproto.customname) = "SShKeyExternalID", (gogoproto.nullable) = false];

  // AWS              *AWSStatus `json:"aws,omitempty" protobuf:"bytes,2,opt,name=aws"`
  optional EKSStatus eks = 2 [(gogoproto.customname) = "EKS"];
}

message Cluster {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional PharmerClusterSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional PharmerClusterStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

message ClusterConfig {
  optional CloudSpec cloud = 1 [(gogoproto.customname) = "Cloud", (gogoproto.nullable) = false];

  optional string kubernetesVersion = 4 [(gogoproto.customname) = "KubernetesVersion", (gogoproto.nullable) = false];

  optional bool locked = 5 [(gogoproto.customname) = "Locked", (gogoproto.nullable) = false];

  optional string caCertName = 6 [(gogoproto.customname) = "CACertName", (gogoproto.nullable) = false];

  optional string frontProxyCACertName = 7 [(gogoproto.customname) = "FrontProxyCACertName", (gogoproto.nullable) = false];

  optional string credentialName = 8 [(gogoproto.customname) = "CredentialName", (gogoproto.nullable) = false];

  map<string, string> kubeletExtraArgs = 9 [(gogoproto.customname) = "KubeletExtraArgs", (gogoproto.nullable) = false];

  map<string, string> apiServerExtraArgs = 10 [(gogoproto.customname) = "APIServerExtraArgs", (gogoproto.nullable) = false];

  map<string, string> controllerManagerExtraArgs = 11 [(gogoproto.customname) = "ControllerManagerExtraArgs", (gogoproto.nullable) = false];

  map<string, string> schedulerExtraArgs = 12 [(gogoproto.customname) = "SchedulerExtraArgs", (gogoproto.nullable) = false];

  repeated string authorizationModes = 13 [(gogoproto.customname) = "AuthorizationModes"];

  repeated string apiServerCertSANs = 14 [(gogoproto.customname) = "APIServerCertSANs"];
}

// ClusterState describes the state of certain versions for a cluster
message ClusterState {
  // KubeVersion describes the version of the Kubernetes API Server, Controller Manager, Scheduler and Proxy.
  optional string kubeVersion = 1 [(gogoproto.customname) = "KubeVersion", (gogoproto.nullable) = false];

  // DNSVersion describes the version of the kube-dns images used and manifest version
  optional string dnsVersion = 2 [(gogoproto.customname) = "DNSVersion", (gogoproto.nullable) = false];

  // MasterKubeadmVersion describes the version of the kubeadm CLI
  optional string kubeadmVersion = 3 [(gogoproto.customname) = "KubeadmVersion", (gogoproto.nullable) = false];

  // KubeletVersions is a map with a version number linked to the amount of kubelets running that version in the cluster
  map<string, uint32> kubeletVersions = 4 [(gogoproto.customname) = "KubeletVersions", (gogoproto.nullable) = false];
}

message Credential {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional CredentialSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];
}

message CredentialSpec {
  optional string provider = 1 [(gogoproto.customname) = "Provider", (gogoproto.nullable) = false];

  map<string, string> data = 2 [(gogoproto.customname) = "Data", (gogoproto.nullable) = false];
}

// DigitalOceanMachineProviderConfig contains Config for DigitalOcean machines.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message DigitalOceanMachineProviderConfig {
  optional string region = 1 [(gogoproto.customname) = "Region", (gogoproto.nullable) = false];

  optional string size = 2 [(gogoproto.customname) = "Size", (gogoproto.nullable) = false];

  optional string image = 3 [(gogoproto.customname) = "Image", (gogoproto.nullable) = false];

  repeated string tags = 4 [(gogoproto.customname) = "Tags"];

  repeated string sshPublicKeys = 5 [(gogoproto.customname) = "SSHPublicKeys"];

  optional bool private_networking = 6 [(gogoproto.customname) = "PrivateNetworking", (gogoproto.nullable) = false];

  optional bool backups = 7 [(gogoproto.customname) = "Backups", (gogoproto.nullable) = false];

  optional bool ipv6 = 8 [(gogoproto.customname) = "IPv6", (gogoproto.nullable) = false];

  optional bool monitoring = 9 [(gogoproto.customname) = "Monitoring", (gogoproto.nullable) = false];
}

message Disk {
  optional DiskInitializeParams initializeParams = 1 [(gogoproto.customname) = "InitializeParams", (gogoproto.nullable) = false];
}

message DiskInitializeParams {
  optional int64 diskSizeGb = 1 [(gogoproto.customname) = "DiskSizeGb", (gogoproto.nullable) = false];

  optional string diskType = 2 [(gogoproto.customname) = "DiskType", (gogoproto.nullable) = false];
}

// AWSMachineProviderSpec is the type that will be embedded in a Machine.Spec.ProviderSpec field
// for an AWS instance. It is used by the AWS machine actuator to create a single machine instance,
// using the RunInstances call (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)
// Required parameters such as region that are not specified by this configuration, will be defaulted
// by the actuator.
// +k8s:openapi-gen=true
message EKSMachineProviderSpec {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  // AMI is the reference to the AMI from which to create the machine instance.
  optional AWSResourceReference ami = 2 [(gogoproto.customname) = "AMI", (gogoproto.nullable) = false];

  // InstanceType is the type of instance to create. Example: m4.xlarge
  optional string instanceType = 3 [(gogoproto.customname) = "InstanceType", (gogoproto.nullable) = false];

  // AdditionalTags is the set of tags to add to an instance, in addition to the ones
  // added by default by the actuator. These tags are additive. The actuator will ensure
  // these tags are present, but will not remove any other tags that may exist on the
  // instance.
  // +optional
  map<string, string> additionalTags = 4 [(gogoproto.customname) = "AdditionalTags", (gogoproto.nullable) = false];

  // IAMInstanceProfile is a name of an IAM instance profile to assign to the instance
  // +optional
  optional string iamInstanceProfile = 5 [(gogoproto.customname) = "IAMInstanceProfile", (gogoproto.nullable) = false];

  // PublicIP specifies whether the instance should get a public IP.
  // Precedence for this setting is as follows:
  // 1. This field if set
  // 2. Cluster/flavor setting
  // 3. Subnet default
  // +optional
  optional bool publicIP = 6 [(gogoproto.customname) = "PublicIP"];

  // AdditionalSecurityGroups is an array of references to security groups that should be applied to the
  // instance. These security groups would be set in addition to any security groups defined
  // at the cluster level or in the actuator.
  // +optional
  repeated AWSResourceReference additionalSecurityGroups = 7 [(gogoproto.customname) = "AdditionalSecurityGroups", (gogoproto.nullable) = false];

  // Subnet is a reference to the subnet to use for this instance. If not specified,
  // the cluster subnet will be used.
  // +optional
  optional AWSResourceReference subnet = 8 [(gogoproto.customname) = "Subnet"];

  // KeyName is the name of the SSH key to install on the instance.
  // +optional
  optional string keyName = 9 [(gogoproto.customname) = "KeyName", (gogoproto.nullable) = false];
}

message EKSStatus {
  optional string securityGroup = 1 [(gogoproto.customname) = "SecurityGroup", (gogoproto.nullable) = false];

  optional string vpcID = 2 [(gogoproto.customname) = "VpcId", (gogoproto.nullable) = false];

  optional string subnetID = 3 [(gogoproto.customname) = "SubnetId", (gogoproto.nullable) = false];

  optional string roleArn = 4 [(gogoproto.customname) = "RoleArn", (gogoproto.nullable) = false];
}

// ExecConfig specifies a command to provide client credentials. The command is exec'd
// and outputs structured stdout holding credentials.
// 
// See the client.authentiction.k8s.io API group for specifications of the exact input
// and output format
message ExecConfig {
  // Command to execute.
  optional string command = 1 [(gogoproto.customname) = "Command", (gogoproto.nullable) = false];

  // Arguments to pass to the command when executing it.
  // +optional
  repeated string args = 2 [(gogoproto.customname) = "Args"];

  // Env defines additional environment variables to expose to the process. These
  // are unioned with the host's environment, as well as variables client-go uses
  // to pass argument to the plugin.
  // +optional
  repeated ExecEnvVar env = 3 [(gogoproto.customname) = "Env", (gogoproto.nullable) = false];

  // Preferred input version of the ExecInfo. The returned ExecCredentials MUST use
  // the same encoding version as the input.
  optional string apiVersion = 4 [(gogoproto.customname) = "APIVersion", (gogoproto.nullable) = false];
}

// ExecEnvVar is used for setting environment variables when executing an exec-based
// credential plugin.
message ExecEnvVar {
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  optional string value = 2 [(gogoproto.customname) = "Value", (gogoproto.nullable) = false];
}

message Filter {
  // Name of the filter. Filter names are case-sensitive.
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Values includes one or more filter values. Filter values are case-sensitive.
  repeated string values = 2 [(gogoproto.customname) = "Values"];
}

message GCSSpec {
  optional string bucket = 1 [(gogoproto.customname) = "Bucket", (gogoproto.nullable) = false];

  optional string prefix = 2 [(gogoproto.customname) = "Prefix", (gogoproto.nullable) = false];
}

message GKEMachineProviderSpec {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  repeated string roles = 2 [(gogoproto.casttype) = "MachineRole", (gogoproto.customname) = "Roles"];

  optional string zone = 3 [(gogoproto.customname) = "Zone", (gogoproto.nullable) = false];

  optional string machineType = 4 [(gogoproto.customname) = "MachineType", (gogoproto.nullable) = false];

  // The name of the OS to be installed on the machine.
  optional string os = 5 [(gogoproto.customname) = "OS", (gogoproto.nullable) = false];

  repeated Disk disks = 6 [(gogoproto.customname) = "Disks", (gogoproto.nullable) = false];
}

message GKESpec {
  optional string userName = 1 [(gogoproto.customname) = "UserName", (gogoproto.nullable) = false];

  optional string password = 2 [(gogoproto.customname) = "Password", (gogoproto.nullable) = false];

  optional string networkName = 3 [(gogoproto.customname) = "NetworkName", (gogoproto.nullable) = false];
}

message GoogleSpec {
  optional string networkName = 1 [(gogoproto.customname) = "NetworkName", (gogoproto.nullable) = false];

  repeated string nodeTags = 2 [(gogoproto.customname) = "NodeTags"];

  // gce
  // NODE_SCOPES="${NODE_SCOPES:-compute-rw,monitoring,logging-write,storage-ro}"
  repeated string nodeScopes = 3 [(gogoproto.customname) = "NodeScopes"];
}

// Config holds the information needed to build connect to remote kubernetes clusters as a given user
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message KubeConfig {
  // Preferences holds general information to be use for cli interactions
  optional Preferences preferences = 1 [(gogoproto.customname) = "Preferences", (gogoproto.nullable) = false];

  // Clusters is a map of referencable names to cluster configs
  optional NamedCluster cluster = 2 [(gogoproto.customname) = "Cluster", (gogoproto.nullable) = false];

  // AuthInfos is a map of referencable names to user configs
  optional NamedAuthInfo user = 3 [(gogoproto.customname) = "AuthInfo", (gogoproto.nullable) = false];

  // Contexts is a map of referencable names to context configs
  optional NamedContext context = 4 [(gogoproto.customname) = "Context", (gogoproto.nullable) = false];
}

message LinodeSpec {
  // Linode
  optional string rootPassword = 1 [(gogoproto.customname) = "RootPassword", (gogoproto.nullable) = false];

  optional int64 kernelId = 2 [(gogoproto.customname) = "KernelId", (gogoproto.nullable) = false];
}

message LocalSpec {
  optional string path = 1 [(gogoproto.customname) = "Path", (gogoproto.nullable) = false];
}

message MachineProviderConfig {
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  optional NodeSpec config = 2 [(gogoproto.customname) = "Config", (gogoproto.nullable) = false];
}

// NamedAuthInfo relates nicknames to auth information
message NamedAuthInfo {
  // Name is the nickname for this AuthInfo
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // ClientCertificateData contains PEM-encoded data from a client cert file for TLS.
  // +optional
  optional bytes clientCertificateData = 2 [(gogoproto.customname) = "ClientCertificateData"];

  // ClientKeyData contains PEM-encoded data from a client key file for TLS.
  // +optional
  optional bytes clientKeyData = 3 [(gogoproto.customname) = "ClientKeyData"];

  // Token is the bearer token for authentication to the kubernetes cluster.
  // +optional
  optional string token = 4 [(gogoproto.customname) = "Token", (gogoproto.nullable) = false];

  // Username is the username for basic authentication to the kubernetes cluster.
  // +optional
  optional string username = 5 [(gogoproto.customname) = "Username", (gogoproto.nullable) = false];

  // Password is the password for basic authentication to the kubernetes cluster.
  // +optional
  optional string password = 6 [(gogoproto.customname) = "Password", (gogoproto.nullable) = false];

  // +optional
  optional ExecConfig exec = 7 [(gogoproto.customname) = "Exec"];
}

// NamedCluster relates nicknames to cluster information
message NamedCluster {
  // Name is the nickname for this Cluster
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Server is the address of the kubernetes cluster (https://hostname:port).
  optional string server = 2 [(gogoproto.customname) = "Server", (gogoproto.nullable) = false];

  // CertificateAuthorityData contains PEM-encoded certificate authority certificates. Overrides CertificateAuthorityData
  // +optional
  optional bytes certificateAuthorityData = 3 [(gogoproto.customname) = "CertificateAuthorityData"];
}

// NamedContext relates nicknames to context information
message NamedContext {
  // Name is the nickname for this Context
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Cluster is the name of the cluster for this context
  optional string cluster = 2 [(gogoproto.customname) = "Cluster", (gogoproto.nullable) = false];

  // AuthInfo is the name of the authInfo for this context
  optional string user = 3 [(gogoproto.customname) = "AuthInfo", (gogoproto.nullable) = false];
}

message NodeInfo {
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  optional string externalID = 2 [(gogoproto.customname) = "ExternalID", (gogoproto.nullable) = false];

  optional string publicIP = 3 [(gogoproto.customname) = "PublicIP", (gogoproto.nullable) = false];

  optional string privateIP = 4 [(gogoproto.customname) = "PrivateIP", (gogoproto.nullable) = false];

  optional string diskID = 5 [(gogoproto.customname) = "DiskId", (gogoproto.nullable) = false];
}

message NodeSpec {
  optional string sku = 1 [(gogoproto.customname) = "SKU", (gogoproto.nullable) = false];

  optional string nodeDiskType = 2 [(gogoproto.customname) = "DiskType", (gogoproto.nullable) = false];

  optional int64 nodeDiskSize = 3 [(gogoproto.customname) = "DiskSize", (gogoproto.nullable) = false];

  optional string externalIPType = 4 [(gogoproto.casttype) = "IPType", (gogoproto.customname) = "ExternalIPType", (gogoproto.nullable) = false];

  map<string, string> kubeletExtraArgs = 5 [(gogoproto.customname) = "KubeletExtraArgs", (gogoproto.nullable) = false];

  optional string type = 6 [(gogoproto.casttype) = "NodeType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  optional double spotPriceMax = 7 [(gogoproto.customname) = "SpotPriceMax", (gogoproto.nullable) = false];
}

message NullNameGenerator {
}

message Operation {
  optional int64 iD = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  optional int64 userID = 2 [(gogoproto.customname) = "UserID", (gogoproto.nullable) = false];

  optional int64 clusterID = 3 [(gogoproto.customname) = "ClusterID", (gogoproto.nullable) = false];

  optional string code = 4 [(gogoproto.customname) = "Code", (gogoproto.nullable) = false];

  optional int64 state = 5 [(gogoproto.casttype) = "OperationState", (gogoproto.customname) = "State", (gogoproto.nullable) = false];
}

message PharmerClusterSpec {
  optional Cluster clusterApi = 1 [(gogoproto.customname) = "ClusterAPI"];

  optional ClusterConfig config = 2 [(gogoproto.customname) = "Config"];
}

message PharmerClusterStatus {
  optional string phase = 1 [(gogoproto.casttype) = "ClusterPhase", (gogoproto.customname) = "Phase", (gogoproto.nullable) = false];

  optional string reason = 2 [(gogoproto.customname) = "Reason", (gogoproto.nullable) = false];

  optional CloudStatus cloud = 4 [(gogoproto.customname) = "Cloud", (gogoproto.nullable) = false];
}

message PharmerConfig {
  optional string context = 1 [(gogoproto.customname) = "Context", (gogoproto.nullable) = false];

  repeated Credential credentials = 2 [(gogoproto.customname) = "Credentials", (gogoproto.nullable) = false];

  optional StorageBackend store = 3 [(gogoproto.customname) = "Store", (gogoproto.nullable) = false];
}

message PostgresSpec {
  optional string database = 1 [(gogoproto.customname) = "DbName", (gogoproto.nullable) = false];

  optional string host = 2 [(gogoproto.customname) = "Host", (gogoproto.nullable) = false];

  optional int64 port = 3 [(gogoproto.customname) = "Port", (gogoproto.nullable) = false];

  optional string user = 4 [(gogoproto.customname) = "User", (gogoproto.nullable) = false];

  optional string password = 5 [(gogoproto.customname) = "Password", (gogoproto.nullable) = false];
}

message Preferences {
  // +optional
  optional bool colors = 1 [(gogoproto.customname) = "Colors", (gogoproto.nullable) = false];
}

message ReservedIP {
  optional string ip = 1 [(gogoproto.customname) = "IP", (gogoproto.nullable) = false];

  optional string id = 2 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  optional string name = 3 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];
}

message S3Spec {
  optional string endpoint = 1 [(gogoproto.customname) = "Endpoint", (gogoproto.nullable) = false];

  optional string bucket = 2 [(gogoproto.customname) = "Bucket", (gogoproto.nullable) = false];

  optional string prefix = 3 [(gogoproto.customname) = "Prefix", (gogoproto.nullable) = false];
}

message SSHConfig {
  optional bytes privateKey = 1 [(gogoproto.customname) = "PrivateKey"];

  optional string hostIP = 2 [(gogoproto.customname) = "HostIP", (gogoproto.nullable) = false];

  optional int32 hostPort = 3 [(gogoproto.customname) = "HostPort", (gogoproto.nullable) = false];

  optional string user = 4 [(gogoproto.customname) = "User", (gogoproto.nullable) = false];
}

message StorageBackend {
  optional string credentialName = 1 [(gogoproto.customname) = "CredentialName", (gogoproto.nullable) = false];

  optional LocalSpec local = 2 [(gogoproto.customname) = "Local"];

  optional S3Spec s3 = 3 [(gogoproto.customname) = "S3"];

  optional GCSSpec gcs = 4 [(gogoproto.customname) = "GCS"];

  optional AzureStorageSpec azure = 5 [(gogoproto.customname) = "Azure"];

  optional SwiftSpec swift = 6 [(gogoproto.customname) = "Swift"];

  optional PostgresSpec postgres = 7 [(gogoproto.customname) = "Postgres"];
}

message SwiftSpec {
  optional string container = 1 [(gogoproto.customname) = "Container", (gogoproto.nullable) = false];

  optional string prefix = 2 [(gogoproto.customname) = "Prefix", (gogoproto.nullable) = false];
}

// https://github.com/kubernetes/kubernetes/blob/aa1dc9db3532dfbf09e45c8e3786a648cd217417/cmd/kubeadm/app/phases/upgrade/compute.go#L28
message Upgrade {
  optional string description = 1 [(gogoproto.customname) = "Description", (gogoproto.nullable) = false];

  optional ClusterState before = 2 [(gogoproto.customname) = "Before", (gogoproto.nullable) = false];

  optional ClusterState after = 3 [(gogoproto.customname) = "After", (gogoproto.nullable) = false];
}

message GroupVersion {
  optional string group = 1 [(gogoproto.customname) = "Group", (gogoproto.nullable) = false];

  optional string version = 2 [(gogoproto.customname) = "Version", (gogoproto.nullable) = false];
}

