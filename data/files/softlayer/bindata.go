// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\xdb\x72\xdb\x46\x12\x7d\xd7\x57\x4c\xf1\xc9\x5b\x05\x6b\x89\xeb\xc2\x7e\x63\x64\xd9\x51\x14\x39\x5e\xcb\xde\xdd\xd4\x56\x4a\x35\x26\x46\x24\x4c\x70\x86\x19\x00\x92\x98\x94\xfe\x3d\x05\x48\xe2\x05\x03\x9d\xc1\x44\xad\x2a\x97\x5f\x6c\x69\x70\xe9\xd3\xd3\xdd\xe7\xb0\x5b\x04\xfe\x3c\x60\x6c\x24\xf9\x52\x8c\x5e\xb3\x51\xa9\x2e\xab\x82\xaf\x85\x1e\x79\xcd\xb2\x90\x57\xe5\xe8\x35\xfb\xff\x01\x63\x8c\x8d\x32\x71\xd5\x2e\x33\x36\xfa\x9d\x3f\xfc\xb4\xd2\x2a\x1b\x1d\x30\xf6\x5b\x7b\x81\x16\xb3\x5c\xc9\xed\x35\x7f\xb6\xff\x32\x36\x2a\xd4\x94\x57\xb9\x92\x8d\x91\xc9\xb2\xac\x84\xce\xf8\xd2\x63\xef\x45\x35\x17\xba\xe0\x32\x2b\xef\x6f\xb8\xb9\x49\x73\x26\x5f\xee\x2c\xff\xa1\xa4\xd8\xde\xb9\x5d\xe2\xcb\x72\xec\x6f\xce\xb8\x5f\x08\x47\xf7\xbf\xff\xd6\xfe\x7f\xeb\x3d\x8e\xe4\x68\x2e\xa4\xe4\xb9\xc7\x4e\x64\x96\xf3\x3e\x04\xd3\xb9\x80\x08\xa6\x73\x31\xf6\x87\x1b\x7c\xc3\x8b\x82\x97\x1e\xfb\x7c\x3e\xe9\xb3\x96\xf1\x02\x5a\xcb\x78\xb1\xef\x6f\xb3\x10\x77\x17\x92\xee\xc2\xab\xce\x82\x3f\x1e\x8e\xf8\xad\xe6\x72\x71\x59\xeb\xca\x63\xef\x84\x5e\x72\xb9\xee\x03\x7e\xa9\x39\x04\x7e\xa9\xf9\x38\x18\x6e\xf4\x47\x25\x67\xec\x54\xc9\x99\xc7\x8e\xe6\xb9\xec\x8d\xcc\x7c\x31\x83\x26\xe7\x8b\x99\x9b\xc9\xba\xac\x94\x7c\x34\x34\x73\x55\x63\x73\xaa\x76\x31\xf7\xb3\x92\x59\x6b\xed\xb4\xcf\x58\xa1\x24\x34\x56\x28\xe9\x62\xec\x4c\x14\x5f\x54\xad\xa5\xf0\xd8\xa4\x2e\x2b\xcd\x8b\xfe\x64\x5f\x0a\x9c\x7e\x4b\x51\xb8\x24\xfb\xbf\x6b\xa1\x45\xc5\xb5\xf2\xd8\x99\xb8\xc9\xa7\xaa\xdf\xe6\x8d\xc5\xe6\x8d\x8b\xcd\xb3\xbc\xe0\xd2\x63\x27\x15\x2f\x7a\x13\x75\x99\x5b\x5c\xcc\x9d\x5c\x3c\x53\xb2\xd2\x82\x17\x1e\x3b\xe2\x92\x67\xfd\xbb\x6a\x09\xe6\x52\x49\x17\x93\xbf\x94\x85\xf2\xd8\x7b\xa5\xaf\x79\xaf\x87\xaa\xc4\x1e\xaa\xd2\xc9\xc3\x0f\x5c\xe7\xa5\xc7\x1a\x1a\x98\x8a\x3e\x7b\x2b\xae\xa1\xbd\x15\xd7\x2e\xf6\xce\xb9\x64\x3f\xa9\x52\x3c\x5a\x88\xe5\xd7\x29\xb4\x57\x7e\x9d\xee\x73\x64\xb3\xe0\xa0\x09\xe7\x5c\xb1\x0f\xbc\x6e\x36\xf9\x31\x04\x5c\x61\x04\x5c\x39\x79\x2c\x54\x5d\x78\xec\x54\x69\xd1\x9b\x3f\xa5\xb0\x98\x13\x8e\xe6\x78\x55\x15\x60\x7f\x05\xa6\xf2\x52\x70\x27\x73\xb9\x9c\xf1\x95\xd2\xc2\x63\x9b\x1f\x7b\xcd\x4a\x4c\xe7\xa5\x9c\x39\x99\x5d\x67\x52\xac\x2d\x7c\x57\xae\x33\x6c\x73\x9d\xb9\xd8\xfc\xa4\x16\x6b\xe5\xb1\x9f\xf8\x8a\xcb\x3e\x73\x95\x5a\x40\x73\x95\x5a\xb8\xb0\xfa\x27\xa5\x95\xac\x14\xa2\x9e\x4a\xe1\xda\xac\x94\x53\x6d\xfe\x97\x97\xf3\x5c\xce\x5a\x99\x7c\x73\xf4\x68\x06\x5d\x67\xb8\x42\xaf\xb3\x4e\x85\x36\x0b\x51\x07\xc6\xe6\x23\x65\x2e\xcb\xaa\xe1\x9e\x4f\xeb\x95\xe8\xf9\x60\x59\x2e\xea\xc6\xa6\x3f\xf5\x97\x5b\xa3\x99\x28\xa7\x3a\x5f\x3d\xe0\xf6\xd9\x54\x69\xc1\xb8\xcc\x98\xff\xee\x07\xf6\x71\x72\xb6\x3d\x75\xca\x2b\x31\x53\x7a\x7d\xff\x19\x40\x17\x6b\xf6\x9f\x5c\x57\x35\x2f\xd8\xb9\xd0\x57\x62\x67\x03\xa7\xab\xc6\x94\xbf\xf5\x98\x2f\x9b\xdf\x7b\xb7\x6d\x03\x2b\x18\x04\x2b\x20\x87\x15\x60\x58\xd1\x20\x58\x11\x39\xac\x08\xc3\x4a\x06\xc1\x4a\xc8\x61\x25\x18\x56\x3a\x08\x56\x4a\x0e\x2b\xc5\xb0\xfc\x61\xc9\xe5\xd3\x67\x97\x6f\x49\x2f\x7f\x58\x20\x7d\xfa\x48\xfa\x30\x94\x01\xa2\x89\xa0\x05\x56\x12\xf1\x44\xe0\xc2\x13\x01\xe2\x89\x5d\x5c\x4f\x0f\x65\x17\x17\x8c\x64\x80\x88\x62\x17\xd7\xd3\x99\xa2\x8b\x0b\x32\x45\x80\x98\x62\x17\xd7\xd3\x13\xac\x8b\xcb\x92\x5f\x80\x2a\x76\x71\x3d\x9d\x2b\xba\xb8\x20\x57\x04\x90\x2b\xf6\x12\x9f\x3e\xc3\x30\x59\x04\x90\x2c\xf6\xa0\xd1\x07\x13\xb3\x45\x84\xd8\x22\x22\x65\x8b\xc8\x85\x2d\x22\xc4\x16\x11\x29\x5b\x74\x71\xc1\x50\x46\x88\x2d\x22\x52\xb6\xe8\xe2\x82\x6c\x11\x21\xb6\x88\x48\xd9\xa2\x8b\xcb\x92\x5f\x80\x2d\x22\x52\xb6\xe8\xe2\x82\x6c\x11\x41\xb6\x88\x68\xd9\xc2\xc8\x7c\x4b\x8a\x21\xb6\x88\x68\xd9\xc2\x80\x66\x89\x66\x38\x70\xd7\x42\xfa\x5d\x0b\x6d\x85\x39\x30\xd3\x22\xfa\x54\x8b\x2c\xb9\x96\x0c\x24\x8d\x84\x9e\x35\x12\x48\x1b\x29\xa2\xff\x94\x94\xfe\x53\x17\xfa\x4f\x11\xfd\xa7\xa4\xf4\xdf\xc5\x05\xb3\x2c\x45\xf4\x9f\x92\xd2\x7f\x17\x97\x25\x8e\x80\x32\x52\x52\xfa\xef\xe2\x82\x84\x91\x22\xfa\x4f\x49\xe9\xbf\x8b\x0b\x96\x64\x0a\xe9\x3f\xa5\xa5\x7f\x23\xf3\x2d\x29\x86\xe8\x3f\xa5\xa5\x7f\x03\x9a\x25\x9a\x88\xfe\x53\x5a\xfa\xef\x42\xc3\xf4\x9f\x42\xfa\x4f\x69\xe9\xdf\x28\x4d\x4b\xae\x21\xfa\x4f\x69\xe9\xdf\xa8\x4e\x3c\x8d\x82\xc3\x02\x9f\x76\x5a\xe0\x3b\x8d\x0b\x7c\x38\x2f\xf0\x69\x07\x06\x06\x34\x3c\xfb\x81\x23\x03\x9f\x76\x66\x60\x40\xb3\x05\x14\x8d\xa5\x68\xc7\x06\x06\x34\x3c\x62\x84\x83\x03\x9f\x76\x72\x60\x40\xc3\x63\x46\x3c\x3b\xf0\x89\x87\x07\x66\x21\xd8\xd2\x0d\xce\x1a\x89\xe7\x07\x26\x3a\x5b\x58\x91\x28\xec\xa1\x23\x50\x05\x03\x1d\x96\x85\xa6\x54\x87\x66\x1d\x81\x30\x98\xc5\x6a\xcb\x3b\x24\x0d\xfb\xe5\xfa\x0c\x54\x62\x11\x87\x04\x8a\x43\x42\x2b\x0e\x89\x93\x38\x24\x50\x1c\x12\x5a\x71\xe8\x42\xc3\x19\x97\x40\x71\x48\x68\xc5\xa1\x0b\xcd\x16\x50\xc4\x23\x09\xad\x38\x74\xa1\x61\x16\x49\xa0\x38\x24\xb4\xe2\xd0\x85\x86\x8b\x34\xc1\xe2\x90\x10\x8b\x83\x51\x08\xb6\x74\x83\xe2\x90\x10\x8b\x83\x81\xce\x16\x56\x28\x0e\x09\xb1\x38\x74\xd1\x59\xc4\x21\xc1\xe2\x90\x10\x8b\x83\x51\xac\xb6\xbc\x83\xe2\x90\x10\x8b\x83\x51\xaf\x56\x71\x08\x86\x6e\x9e\x1f\x3c\xc3\xee\xf9\x01\xdc\xbe\x10\xb6\x36\x21\x6d\x6b\x13\x3a\xb5\x36\x21\x6c\x6d\x42\xda\xd6\xc6\x80\x06\x4b\x22\x84\xad\x4d\x48\xdb\xda\x18\xd0\x60\xc6\x85\xb0\xb5\x09\x69\x5b\x1b\x03\x1a\xa4\xb9\x10\xb6\x36\x21\x6d\x6b\x63\x40\xb3\x96\xc1\xd0\x64\x23\x50\x2f\xb3\x10\x6c\xe9\x86\xd4\x2b\x24\x6e\x6d\x4c\x74\xb6\xb0\x22\xf5\x0a\x89\x5b\x1b\x03\x1d\x56\xaf\x10\xb7\x36\x21\x71\x6b\x63\x16\xab\x2d\xef\x90\x7a\x85\xc4\xad\x8d\x59\xaf\x36\x2e\x81\xea\xd5\x29\x8b\x67\xd8\x3d\xbb\x7a\x05\xd1\x60\x91\x88\x9e\x43\x26\x22\x98\x7d\x31\x6c\x0e\x63\xda\xe6\x30\x76\x6a\x0e\x63\xd8\x1c\xc6\xb4\xcd\xa1\x01\xcd\xb6\x6b\xa0\x28\x62\xda\xe6\xd0\x80\x06\x4b\x22\x86\xcd\x61\x4c\xdb\x1c\x1a\xd0\x20\x0f\xc7\xb0\x39\x8c\x69\x9b\x43\x03\x1a\xac\xd3\x18\x37\x87\x31\x71\x73\x68\x16\x82\xb5\x48\x87\x06\x95\x40\x5e\x4d\x74\xb6\xb0\x22\x79\x8d\x89\x9b\x43\x03\x1d\x96\xd7\x18\x37\x87\x31\x71\x73\x68\x16\xab\x2d\xef\x90\xbc\xc6\xc4\xcd\xa1\x59\xaf\x36\x2e\x81\xf2\x1a\x53\x37\x87\x3d\x75\x61\xdb\x3e\x28\xaf\xfb\x22\x41\x20\xaf\xa6\x4c\x60\x79\x3d\x91\x95\x28\xd8\xff\x84\x92\xec\x38\x7c\xe9\x07\xff\x1a\xb3\xab\xf0\x51\xb8\xe7\xb9\x9c\x15\x82\xf5\x5e\xc4\x5e\x44\xec\xa8\xf1\xc5\x63\xe1\x61\x3c\x66\xef\x7e\xfc\xe3\x1f\xd0\x91\x1f\xb8\x16\xec\x4c\x54\x44\xdf\xcb\xd9\x01\xc5\x8e\xe3\x97\x41\x12\x40\x57\xde\x34\x7b\xd8\x7f\x0d\x7b\xe1\x07\x0f\xae\x04\x87\x11\x85\x2b\x8e\x13\xf1\xdd\x0d\x7e\x80\x15\xfd\x0d\x57\x22\xf6\xc2\x4f\xb6\xae\xf8\x24\xae\xb8\x95\xe8\x77\x99\x60\x7f\x23\x28\xdf\x6a\x4c\x1a\x58\xb1\x53\xa5\x6c\x2f\x61\x2f\x82\xf1\xd6\x93\x90\xc2\x93\x60\xec\x46\xb0\x5d\x5c\xaf\xdc\x5d\x79\x75\xef\x4a\xb4\x75\x25\x21\x71\xc5\xfc\x36\xa6\xb3\x2b\x8e\xf9\xf5\xea\x2e\xbf\x82\x94\xda\x15\xf3\x9b\x45\xdf\x4d\x54\xdc\x4a\xe5\x5b\xf6\x24\x88\xe1\xc7\xe0\xef\x38\xbf\xbe\x65\x2a\xde\xb8\xb2\x79\x0a\x73\xaa\x45\x26\x64\x95\xf3\xa2\xe7\x19\xcc\x95\x56\x57\x79\x26\x74\xab\x86\x7b\x6f\x10\xb9\x73\x2d\x2f\x57\x05\x5f\xbf\x55\x7a\xc9\xab\xe6\x9c\xcb\x5c\x14\x3b\x4f\xde\x72\x29\x55\xd5\x3e\x64\xda\xdc\xfb\xe1\xae\x8d\xd1\x42\xd5\xd9\xe1\x6a\xce\xf5\x52\xe8\xc3\x5c\xfd\x73\x5a\xd4\x65\x25\xf4\xcb\x2d\x9a\xe6\x76\x0f\x4f\x8e\xde\x6e\xee\xd8\x1a\xd8\x7f\xea\x74\x7b\xdb\xbb\xf7\x9a\x4c\x95\xbc\xcc\x67\x2d\xe2\x5f\xde\x7e\xfa\x79\xf2\xeb\xf1\xc7\x8b\xc9\x87\x93\x8b\xcf\xe7\xc7\x1f\xdf\x4f\xce\x8e\x37\xf0\xee\x6e\xa8\x74\xb3\x2f\xdb\xf7\xa3\x5c\xf0\x55\x7e\x51\x97\x42\xb7\x6f\x4e\xd9\x3b\xf7\x6b\x79\x17\xc2\xfe\xa3\x05\xff\x22\x5a\xd4\x93\x0f\x27\xec\x73\xef\x29\xb9\x5c\xd5\xed\x3e\x55\xe2\xa6\x1a\x6d\x8e\xdc\x7a\xce\xce\x9c\x1e\xff\x3a\xc4\x8f\x85\x58\xf7\xbb\xc0\x57\xf9\x69\xf7\xd8\x9e\x03\xc6\xd1\x0d\xf6\x15\x2f\xcb\x6b\xa5\xb3\x1d\xfc\xf7\x3f\x75\x1f\xf0\x5d\xd4\x5f\x84\x96\xa2\xea\x7b\xba\xf7\x4a\xe8\xf2\xe1\x8f\x66\x87\xe9\xe1\xf8\xf1\x3f\xa9\xed\x1f\xbd\x7f\x71\xcd\x4e\x2e\x65\xe2\x6a\xf4\x9a\x55\xba\x16\x5b\xbc\xa3\xdf\xb9\xb9\xd6\xbe\xd0\xe6\x6e\xf5\x60\x17\x78\x0b\xf8\xe0\xf6\xaf\x00\x00\x00\xff\xff\x20\xbd\x18\xa2\x2f\x47\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18223, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
