// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcb\x72\xdb\x36\x14\xdd\xfb\x2b\x30\x5c\xab\x2a\xf8\x00\x45\x7a\x27\xc7\x4e\xa7\x6d\x9c\x66\x22\x35\x5d\x74\x32\x19\x84\x84\x15\x56\x14\xc0\x80\x94\x32\xaa\xc7\xff\xde\x21\x23\x91\x04\xf1\xe0\xc3\x4a\xc7\x1b\x5b\x02\x1f\xe7\x9e\x73\x2f\xee\x3d\x22\x1f\xaf\x00\xb0\x28\xde\x11\xeb\x1a\x58\x87\x7d\x5a\x70\x6b\x56\x2e\x11\x7a\xc8\xad\x6b\xf0\xf7\x15\x00\x00\x58\x31\x39\x54\xcb\x00\x58\x5f\xf1\xf9\x53\xc6\x59\x6c\x5d\x01\xf0\xb1\xba\x80\x93\x4d\xc2\x68\x73\xcd\x63\xf5\x17\x00\x2b\x65\x11\x2e\x12\x46\x4b\x80\xb7\xe4\x1b\xf8\x8d\xf0\x9c\x1c\x4f\x37\xa9\x2f\x2c\x8f\xda\xcd\xe2\xbf\x8c\x92\xe6\x5e\xd5\x92\x6d\x9d\x3e\x7f\xac\xfe\x3f\xcd\xf4\x30\xab\x24\x4d\x22\x46\xc1\x07\x9c\xa6\x1a\x28\xc7\x8c\xe5\x8c\x00\x3b\xc6\x54\x03\x12\x9a\x41\xc2\xe1\x20\xaf\xbe\x24\x11\xde\x30\x15\x8a\x99\xc9\x08\x22\xef\x30\x4f\x72\x25\x82\x67\x86\xf0\x86\x63\xac\xd9\xf6\xa8\x66\x81\xcc\x18\x68\x38\xc6\x2d\x4e\x53\xac\x24\xe2\x1a\x31\xdc\xe1\x10\xf7\x09\xde\x25\x4a\x04\x73\xca\xdd\x11\x29\x5f\x11\x5c\x14\x29\x51\xa1\x98\xf3\x31\x22\x1d\xab\x84\x6e\x70\xc6\xb8\x1a\x05\x9a\x61\xe0\x70\x9c\x37\x2c\x07\x4b\xba\x21\x29\x51\xe6\xc5\x9c\xfb\x11\xa9\x5f\x16\x29\xa6\x05\x56\x61\xf8\x46\x0c\x7f\x04\xc6\x2e\x2f\x08\x8f\xf1\x4e\x85\xb2\x30\xa2\x2c\xc6\x28\x46\x63\x46\x55\x10\x81\x11\x22\x18\x0e\xf1\x9a\x63\xba\x7d\xd8\xf3\x42\x85\x62\xae\xe3\x6e\x19\xd7\x53\x20\xa1\x79\x81\x69\x44\xd6\xc7\x8c\x28\x66\x41\xbe\xdd\x57\x8d\x11\xb6\x4a\x2b\x26\x79\xc4\x93\xec\x1c\x95\x8f\x90\xeb\x83\xfb\x1b\xf0\x7e\x79\x3f\x5b\x40\x08\x7e\xb9\x01\xab\xd5\xed\xcc\x46\x73\x08\xc1\xfa\x06\xdc\xfc\xd5\x5c\x1b\xe1\x82\x6c\x18\x3f\x56\xb5\xbc\xba\x6d\x1d\xc8\x4a\x20\xc7\x6b\x98\xe1\x9d\x75\x0d\xfc\x66\x21\x4e\xf2\xad\x75\x0d\x16\x10\x9a\x87\xce\x4c\x68\xd8\x33\xa1\xfe\x67\xaa\x02\x6a\x11\xcb\x38\x29\x23\x8c\xad\x6b\x50\xf0\x3d\x51\x66\xe4\x2c\x89\x8d\xb4\x92\x04\x76\xe8\x9c\x15\xb1\xed\x46\x11\xd8\xa3\xc8\xed\xdd\xed\xaf\xaf\x96\xeb\x3b\x59\x97\x8e\x2c\x41\x57\x15\xdb\x36\xab\xe2\xb4\xa9\xf7\x8c\x98\x9a\xa0\xaf\x25\x68\xfb\x6e\xe0\x29\x18\x3a\x93\x19\x76\x13\x6f\xfb\xe3\x29\x0e\x63\xb5\xd0\xb2\x72\x3c\xb4\xf0\x15\xac\xdc\xc9\xac\xfc\x0e\x2b\x47\x2a\xe7\x4b\xb1\x0a\xb4\xac\x5c\x67\xe1\x07\x0a\x56\xde\x64\x56\x41\x87\x95\xeb\xfc\x18\x56\x0e\xb4\xf5\x15\x08\x9d\xba\x00\x1d\x54\xef\xb0\xf1\x2d\xc7\xee\x16\x5e\x97\x8b\x83\x86\xef\x2c\xb1\xe1\x88\x9b\xce\x13\xbe\xa1\xf6\x37\x57\xf8\x12\x8a\x6d\x6a\xd6\x1e\x47\xb3\xf6\xe0\x98\xe9\xfb\xbb\x4e\x50\x47\x5f\xfc\xd0\xab\xab\xc4\x6b\x36\xf4\xf3\x05\x95\x8a\xc3\x1b\xd1\xaa\x5e\xbc\xa0\xae\x56\x50\x0f\x86\x75\x33\xf1\x9b\x5e\x32\x61\x28\x76\x04\x95\x7a\x88\xff\x72\x04\x9d\xa4\xa1\x37\x6c\x90\x36\xd6\xc2\x1b\x2f\x62\x77\xbe\xc8\x13\xb4\xc7\x57\x98\x54\x44\x6a\x63\x61\x66\xad\xb7\x0f\xc2\x74\x75\x1a\xda\x13\x0c\x55\x77\x00\xc9\x63\xd5\xe9\xe1\x1d\x4e\xe1\xa6\x77\x0e\xc2\x34\x72\x1b\x6e\xfe\x78\x6e\xfd\x63\xc8\xed\xe5\x36\x8c\x8e\xde\x32\x08\xe6\xd7\x83\xc3\xad\x9e\xaa\x71\x76\x93\x25\x9b\x5f\x0f\x42\x73\xa4\x7a\x1b\x10\x06\x2e\xac\x8b\x2a\xb8\xb0\x4d\x0f\xa5\xb2\x0a\xcc\x91\x06\x7a\x49\x91\xdd\x6c\xf9\xd3\x64\x5f\xae\x97\xfd\xa3\x7d\xb9\x5e\xf6\x8d\x22\x38\x47\xd2\xb6\x77\x90\x31\x4e\xbd\xa0\xa2\x03\x81\x75\xa0\xbd\x23\x73\x40\xa0\x0a\x13\x62\x96\x33\x1c\x34\xd7\x11\x6c\xc2\xec\x1d\x44\x03\xc2\x94\x36\x1c\x32\x67\x3d\xd4\xff\x8a\x74\xe1\xa2\x4e\xfb\xa2\xa5\x66\x6f\xab\x57\x84\xd9\x1d\x98\x6e\x37\xcc\x85\x59\xcd\x50\x6f\x3b\xdb\x43\xdd\x86\x2d\x39\x7b\x77\xd1\x80\x38\xe5\x1f\x07\xb0\x47\x4f\xbd\xfb\x10\xaa\xf3\x92\x76\x4e\x2e\x4d\xd8\x8a\x61\xc4\x0f\xe8\x50\x3f\xf6\x05\x2f\x8a\x2e\x68\x9d\x64\x2f\x8a\x26\x06\xaf\x9f\xde\xed\x12\x09\x2f\x69\x59\xa4\xf2\x08\xa7\x3e\x09\x11\x9d\x9e\xc1\xdb\x79\xfa\xe7\x27\xe8\x59\xa6\x7a\xa2\xea\x7a\x5f\x21\x38\x45\x74\x49\xcb\x24\x3b\x45\xf4\x52\x75\x7f\xa6\xba\xfa\x99\x2c\x38\xd2\xcb\xba\x36\xd9\x91\xf6\xb9\xb6\x4b\xe8\xfb\x7f\x49\x3a\xf0\xb1\x8c\x7f\x61\xe7\x28\x5b\x61\xff\x47\x88\x6a\x94\x71\xa8\x72\xf5\xa3\xe8\x88\x93\x98\xd0\x22\xc1\xa9\xe2\x41\x74\xc6\xd9\x21\x89\x09\x2f\x15\xf8\x50\xbf\xf5\x3c\x33\xcc\x52\x7c\x7c\xcd\xf8\x0e\x17\xe5\xf1\x87\x84\xa4\x71\x73\x1c\x53\xca\x8a\xea\x21\x7a\x79\xdf\xc7\x26\xc6\x28\x65\xfb\x78\x9e\x7d\xc1\x7c\x47\xf8\x3c\x61\x3f\x47\xe9\x3e\x2f\x08\xff\xa9\x89\xa4\xbc\x5d\x9b\x96\x74\x49\x4c\xf3\xee\xe9\xa7\xb3\x9f\xea\x00\xaa\x78\x44\xc1\x9b\x28\xbe\xbf\xba\x8d\x18\x7d\x48\x36\x15\xb9\x3f\xdf\xac\xdf\x7f\x5a\xff\xf1\xfb\xdd\xdb\x16\x70\x79\x17\xc6\x77\xf5\x3b\xdf\x4f\x05\xdb\x12\x2a\x9e\xf0\x4f\xfe\xbd\xb2\x14\x87\x52\xfc\x99\x54\xc1\xbd\x23\x3c\x67\x14\xa7\x60\x19\x45\x24\xcf\xc1\x5a\x3e\x37\xa1\xd9\xbe\x92\x31\xc3\x79\xfe\x8d\xf1\xd8\xaa\x8f\x3e\x9d\x73\xda\xc9\xdc\x76\xff\x99\x70\x4a\x0a\xd5\x1b\x84\x03\xe1\xf9\xb9\x8b\xcc\x83\x79\xcb\x01\x9e\xde\x58\xb7\x12\x12\x93\xc3\xa9\x34\x5a\x92\x57\x6f\xad\xa5\xd5\xaf\xb8\x5d\x44\xe7\xd0\xba\xdb\x50\x00\x0f\x87\x80\x3f\xe0\x34\x57\xa0\x77\x97\x2b\xf8\x6a\x51\xc4\x2f\x25\xb9\x7a\xfa\x2f\x00\x00\xff\xff\x3a\x0b\xba\x5c\xa4\x1f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8100, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
