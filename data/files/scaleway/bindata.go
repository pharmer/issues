// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x53\xe2\x30\x10\xc7\xdf\xf9\x2b\x32\x7d\xae\x1c\x2d\xb5\xc7\xf1\x86\x8c\x3a\xce\xa9\xdc\x28\x73\x3f\xc7\x71\x62\xbb\x62\x8f\x36\xa9\x49\x40\xd1\xe1\x7f\xbf\x49\x80\xb6\x84\x52\x2c\x5e\x7c\xf1\xc7\x66\xbb\xfb\xf9\x6e\x77\x4b\x97\xd7\x06\x42\x16\xc1\x09\x58\x5d\x64\xf1\x00\xc7\xf0\x84\x67\x96\x2d\xad\x40\xa6\xdc\xea\xa2\x3f\x0d\x84\x10\xb2\x42\x98\x2a\x33\x42\xd6\x23\x5e\xfd\x95\x32\x1a\x5a\x0d\x84\x6e\xd4\x05\x0c\x46\x11\x25\xf9\x35\xaf\xea\x27\x42\x56\x4c\x03\x2c\x22\x4a\x64\x8e\x5e\xc2\x05\xb0\x10\x27\x36\xba\x04\xf1\x00\x2c\xc6\x24\xe4\xcb\x80\x59\x10\xe9\x89\x13\xee\xe4\xf6\x17\x4a\x20\x0f\xad\x4c\xca\x61\xf9\xef\x8d\xfa\x3d\xb7\xb7\x27\xfe\x86\x59\xc4\x6d\x74\xc2\x30\x09\xa0\x2c\x5f\x8a\x59\x75\x3e\xe5\xb0\x9e\x2f\xd3\x1e\x11\x2e\x64\xe0\xe1\x2c\x85\x92\x0a\xf0\xf1\x44\x89\xbf\xba\xf0\xbd\x03\xc7\xed\x9c\x1e\xe5\x99\x42\xe0\x01\x8b\xd2\x15\x27\x66\x89\xef\xe5\xa7\x41\x2a\xaf\xf4\xbd\x1c\x18\x27\x56\x17\x39\x6e\x67\x67\x69\xec\x4a\x74\xbb\x8a\xd0\xaf\x0b\xe8\xf8\x3a\xa0\x6f\x90\xcf\xad\x8b\xa7\x97\xcf\x35\x08\xd7\xae\x4d\xd7\x76\x35\xbc\xb6\x49\x3e\xaf\x76\xf3\x69\x74\x9e\x41\x38\xbf\x36\x9d\xd7\xd1\xf0\x7c\x93\x7c\xb5\x27\x57\xa7\x33\x33\xb6\x7d\xa7\x8a\xea\x5d\xd3\xf0\x76\x06\xf7\x7c\x2b\xc4\x73\xc7\xbf\x5d\xab\x0d\x16\x30\xa2\x6c\x26\xcf\x8e\x30\x83\x0b\x10\x38\xde\x55\xba\xc2\x54\x84\x11\x1f\x5b\x5d\x74\xd8\x32\x53\x4d\xf7\xc2\xac\x92\xc2\xc3\xd1\xb4\x92\xeb\xff\xab\x44\x6f\x9d\xce\x07\x09\xf9\xde\x77\xf6\xeb\xae\x7e\x4c\x27\x21\xba\x06\x36\x05\xc6\x77\x3d\xd9\x36\xd4\xb8\x2d\x63\x72\xf6\x6b\xb1\x4a\x39\xfa\xcd\xf1\x74\x39\x8e\x39\x39\xfb\xf5\x59\xa5\x1c\xfd\x53\xf1\xa3\xc6\xff\xa7\x7a\x47\x6b\x55\x3c\xe9\xf7\x96\xe4\xe8\x9a\x1c\xb7\x55\x72\x93\x0c\xea\x3a\xac\x23\xab\x74\x48\x9c\x43\x63\x74\xed\x5a\x45\x2f\xff\x90\x30\x57\x3b\xdf\x4c\x4b\xb4\xf4\xf7\x97\x8d\x8e\xf8\xfc\xee\x86\xc8\xf6\x94\x80\x41\x08\x44\x44\x38\x2e\xd9\x52\x52\x46\xa7\x51\x08\x4c\x32\x5f\x17\x77\xc1\x15\x4c\x1a\xe3\xd9\x09\x65\x09\x16\xd2\xe5\x3e\x82\x38\xcc\xcf\x31\x21\x54\xa8\x75\x4b\x86\x7e\xcd\x79\x02\x29\xbf\x99\x3e\x60\x96\x00\x6b\x46\xf4\x53\x10\x4f\xe4\x12\x78\x90\xc3\xc8\x70\x2b\xe4\x79\x16\x51\x25\x58\x17\x9b\x87\x5d\x6c\xa8\x01\x25\xf7\xd1\x48\x01\xf7\x7b\xe7\xc7\x3f\x7a\xbf\x6e\x07\x57\xa7\xbd\xcb\xb3\xdf\xbd\xe1\xd9\xe0\xb2\x50\x16\x19\x8f\xb2\xa4\xb8\xe7\xde\x52\x36\xc2\x24\x7a\x59\xec\x88\x6b\xae\x7f\xf9\xe2\xb6\x6e\xf7\x88\xf1\x1d\x28\xee\xc1\x56\x97\x88\xa4\x13\x55\x29\x01\xcf\xc2\xca\x4e\xe6\x76\x1d\x39\xc3\xc1\xd7\xe3\x5d\x3a\x04\x1d\xc3\x16\x01\x25\x47\x19\xf9\x70\xf3\x2c\x43\x4e\x31\xe7\x4f\x94\x85\x05\xec\x2d\x2d\x35\x9e\xdc\x01\x23\x20\xca\xf6\x5e\xd9\xf0\xcb\x01\x71\x9a\x9d\x66\x2b\xef\x96\xe5\xb7\x0b\x85\x36\x09\x61\x6a\x75\x91\x60\x13\x28\xf6\x32\xa3\xe1\xa6\xf5\x11\x2f\x6d\x8d\x22\x9a\x3e\xba\x6b\xc9\xbf\xbc\x25\xf9\x3d\x8e\x79\x49\x76\xdd\xac\xd2\x2b\xe3\x7a\x7e\x59\x92\xc6\xfc\x5f\x00\x00\x00\xff\xff\x05\x1f\xab\x76\x53\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4435, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
