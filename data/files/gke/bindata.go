// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gke

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\xdf\x73\xda\xb8\x16\xc7\xdf\xf3\x57\x68\xfc\x74\xef\x0c\xf8\xe2\x1f\x18\x9a\xb7\x86\xe6\x76\xdb\x99\x6e\x33\x49\xba\x2f\x3b\x9d\x8c\xb0\x15\x50\x31\x92\x2b\xdb\x74\xd9\x4e\xfe\xf7\x1d\x3b\x80\x41\x3f\x40\x40\xda\x9d\xf5\x9e\x97\xdd\xd6\xe7\x58\x7c\x25\xd9\x9f\x73\x8a\xbf\x83\xbf\x5f\x20\xe4\x30\x3c\x27\xce\x25\x72\x26\x33\xe2\x74\xaa\x03\x84\x2d\x72\xe7\x12\xfd\x7e\x81\x10\x42\x4e\x42\x16\xf5\x61\x84\x9c\xaf\x78\xfd\xa7\x4c\xf0\xc4\xb9\x40\xe8\x73\x7d\x82\x20\x13\xca\x59\x73\xce\xf7\xfa\xbf\x08\x39\x29\x8f\x71\x41\x39\xab\x86\x1f\x4d\x31\x9b\x4c\x4b\x8c\x46\xbc\x64\xc5\xb2\x83\xee\x31\xfd\x86\xd9\x6a\xc4\xcd\x28\x55\x2a\xce\x29\xee\x12\x9c\x17\x5e\x13\xfd\x93\x33\xd2\x7c\x42\x7d\xa8\x49\xeb\xe2\x4d\xe2\xee\xf1\xb1\xe1\x78\xec\xac\x0e\x7f\xae\xff\xff\xd4\x31\xeb\xbe\xe7\xb3\x25\xef\xa0\xf7\x38\xdb\x23\x96\x71\x51\x4c\x2d\x15\x37\xb9\x1a\xd9\x5b\x41\x55\xfb\x56\xf0\x88\x09\x18\x45\xe7\xbc\x2c\xa6\x16\x82\x9f\xf3\x34\x62\x57\x01\x55\xe8\x2a\xf0\x62\x22\x2d\x57\xb6\xc9\x35\x89\x5d\xaf\xec\x79\xba\xca\xbc\x10\x38\x3d\x42\x9c\xe6\x04\x49\xa1\x2e\x63\x7c\x30\xe3\x88\x05\xbe\x2b\x5c\xf4\x76\x4a\xf3\x14\x53\xd6\x41\x57\x24\x9d\xd0\x72\xae\x9b\x1d\x29\x05\xcf\x48\xf7\x1b\x39\x34\xab\xed\xc4\x5d\xad\x3b\x91\xd8\x18\x49\xce\xdb\x86\xad\xb1\x7c\x5b\xa1\xfe\xee\xb2\xef\x44\x4c\x53\xf0\xcf\xbd\x8e\xb7\xc6\x0a\x6c\x85\x06\x46\xa1\x81\x51\x68\xf0\x82\x42\x43\x5b\xa1\xa1\x51\x4e\x78\xae\x9c\x1a\x77\x78\x4e\x04\x8d\xad\x09\x6b\x38\x67\x77\x35\x4d\x49\x63\x9b\xa4\x33\x27\x55\xdf\xbd\xeb\x61\x0f\xcf\x47\x4d\xdf\x9d\x8a\x26\x3e\x3e\x10\x3f\x62\x02\x55\xa9\x8e\x69\x8a\xae\xd2\xf2\xf1\x31\xef\xa0\x77\xfc\x1b\xd6\x4d\xaa\xcc\xbb\x31\x61\x15\x9f\xf6\xcf\x66\x2b\x6f\x77\x1a\xdb\x81\xb1\x29\x10\x9b\x02\x8f\xf6\x33\xba\x22\x62\x46\x52\xb2\xdc\x74\x21\x77\xd5\x02\xa1\x11\x16\x3c\xa5\xcc\x34\xb9\xc3\xfb\xb4\x4e\x52\xd4\xaf\xd7\x5c\x77\xf4\x4c\x00\xae\xc6\xd9\x7f\xab\xae\x93\x94\xf5\x7e\x3e\xaa\x93\x7b\xd4\x8d\x7b\x3f\x25\xe8\x0d\x4e\x53\x92\x77\xd0\xc7\x5b\x83\xcc\xc3\xc5\x64\x9d\xa4\xc8\xd4\x94\x97\xcd\x51\x59\xe6\xa6\x21\xa5\x2c\x2f\x30\x8b\xc9\xfd\x32\x23\x9a\xb6\x34\x9f\x95\x95\xb0\x47\xaf\x3b\xa7\xb1\xe0\x8d\xb0\x84\xe4\xb1\xa0\xd9\x7a\x6e\x1e\x5a\x8c\x6e\x3e\xa1\xff\xe4\x53\x2c\x48\x82\xb2\xe9\x32\xa7\x31\x4e\x51\xcc\x05\xf9\x2f\xc2\x2c\x41\x3d\x37\x42\x6f\xaf\xd0\xed\xeb\x0f\xcd\x20\x71\x56\x8d\xee\x35\x2b\x81\xe7\xce\x65\x95\xd9\x7c\x0c\xcd\x67\xce\x25\x0a\x7a\x03\xff\x87\xf5\xb7\x7b\x7a\xc7\x73\xba\x4e\x43\xa7\x77\x4a\x6f\xb8\xa7\x41\x3b\xd0\xbd\x1d\x6a\x8b\x5e\xa6\xb5\x32\xb5\x2d\xa7\xb5\x3a\xa6\xde\xe2\xb4\x7e\xc4\xd4\x00\x9c\xd6\x34\x98\xea\xf7\xbe\xca\x6e\x51\x29\x5f\xb2\xe6\xee\x2f\x69\xe7\x97\x44\x43\x65\x79\xd1\x22\xa5\x2b\x01\xc7\x95\x0b\x1d\xab\x8f\xe3\xba\x0e\xa3\xe7\x20\xb7\xa3\x25\xeb\xc4\xeb\xe6\x73\x9c\xa6\x67\x90\xd5\x73\x07\x2a\x59\x71\x41\x26\x5c\x2c\xeb\x7f\xcf\xec\x8e\xaf\x87\xae\xe7\x0e\x00\xba\x00\x5d\x80\x2e\x40\xb7\xfd\xd0\x65\x5e\x77\x4a\x27\xd3\x38\x2b\xbb\x5e\x64\x26\x6f\x54\xa3\x37\xef\x20\x2f\x74\xc3\xbd\x88\xfd\x85\x4e\xa6\x68\x74\xf3\x49\xa1\x6c\x24\x63\x36\x74\x43\x99\xb3\x51\xbf\x1f\x44\x00\x5a\x00\x2d\x80\xf6\x50\x12\x80\xf6\x1f\x0b\x5a\xdf\xc8\x59\x7f\x83\x59\x77\x78\x12\x65\x7d\xa5\x97\x1d\x02\x63\x81\xb1\x72\x04\x18\x0b\x8c\x6d\x37\x63\x03\x33\x64\x83\x0d\x65\xfd\xa1\x0e\xb3\x35\x48\x03\x99\xa4\x55\x2e\xa0\x14\x50\x2a\x47\x00\xa5\x80\xd2\xb6\xa3\xd4\xfc\xc5\x80\x29\xcd\xa6\x57\x3d\x80\x58\x92\x09\x52\x0d\x93\x38\x97\xa8\x10\x25\xb1\x54\x1b\x1a\xb5\x86\x6b\xec\x07\xba\xe7\x6f\x16\x82\x43\x49\x6f\xa0\x3e\x9d\x83\x8a\xa0\x09\x40\x45\x80\x8a\x00\x15\xa1\x45\x15\x21\x32\x43\x36\xda\x50\xb6\x3f\x30\xda\x1c\x22\x99\xa4\x55\x2e\xa0\x14\x50\x2a\x47\x00\xa5\x80\xd2\x76\xa3\x74\x68\x24\xe9\x70\x0d\xd2\x81\xeb\x9f\xd4\xae\x0e\x25\xc8\x0e\x5c\x1f\x18\x0b\x8c\x95\x23\xc0\x58\x60\x6c\xbb\x19\xfb\xca\xfc\xfd\xc5\xab\x8d\xb1\x61\x68\x6a\x56\x5f\xc9\xc6\x85\x61\xf4\x13\x8c\x0b\x3f\xec\x76\xb7\xbe\x41\xad\xae\xc1\xe3\x76\xf3\x88\x7d\x9b\x93\xb9\xa5\x21\xa5\x67\xe1\x47\xf9\x40\xe6\xd5\x5f\xa5\x9d\x55\x2d\x29\x3d\x70\xa4\x40\x85\x54\x22\x50\x21\xa1\x42\xb6\xb7\x42\x56\xa4\xb5\x71\xa4\x04\xa7\x62\x56\xf1\xa4\x04\x00\x59\x80\xac\x1c\x01\xc8\x02\x64\xdb\x0d\x59\x3b\x4b\x4a\xcf\xde\x91\xd2\x03\x43\x0a\x80\x54\x89\x00\x48\x01\xa4\x6d\x07\xe9\x41\x43\x8a\x92\x66\xd9\xab\xee\x87\xec\x09\x96\x94\x4a\x88\x85\x25\xc5\xb7\x70\xa4\xe8\x15\xcb\x8f\x52\x7d\x78\x90\x0a\x45\x41\x89\x40\x51\x80\xa2\xd0\xee\xa2\x60\xe5\x49\x09\x3d\x6b\x4b\x4a\xe8\x01\x48\x01\xa4\x4a\x04\x40\x0a\x20\x6d\x37\x48\x2d\x1c\x29\x7d\x0b\x43\x8a\xbe\x5b\x95\x3d\x29\x7d\xb0\xa4\x00\x64\x95\x08\x40\x16\x20\xdb\x6e\xc8\x5a\x59\x52\x22\x5f\x63\x6d\xd0\x7b\x52\x22\x1f\x2c\x29\x3f\xd2\x92\x92\x17\x98\x25\x58\x24\x5d\xcf\xb8\x6f\xcf\xbf\x4e\xd5\x41\x81\x3b\xe8\xef\xff\x11\xaa\xd5\x58\xf2\xa6\xca\xbf\x43\x55\x0d\x04\xd5\x11\xaa\xa3\x1c\x81\xea\x08\xd5\xb1\x9d\xd5\xb1\xa1\xac\x8d\xf3\x2f\xea\x9d\x86\x59\xa5\x76\xf6\x80\xb2\x40\x59\x39\x02\x94\x05\xca\xb6\x9c\xb2\x16\xae\xbf\x81\x7b\x5a\x2f\x2b\x3f\x46\x1d\xb8\xd0\xca\x02\x64\x95\x08\x40\x16\x20\xdb\x72\xc8\x5a\xb9\xfe\x3c\x5f\xd3\xcb\xea\x0d\x29\x9e\x0f\xed\x2a\x90\x54\x89\x00\x49\x81\xa4\xad\x27\xe9\x5e\xdb\x9f\x3e\xcf\xa6\x59\xdd\xcf\xd8\x23\x4d\x7f\x1b\x19\x16\xae\x3f\xef\xb4\xe6\x5a\xb6\xaa\x78\xd0\x5b\x43\x45\x50\x22\x50\x11\xa0\x22\xb4\xbc\x22\x58\x79\xfe\xfc\xd0\xd4\x5b\x2b\x9e\x3f\x3f\x84\xde\x1a\x48\xaa\x44\x80\xa4\x40\xd2\x96\x93\xd4\xc2\xf4\x17\x9c\xf6\xb8\x4d\x76\xfc\x05\x80\x58\x40\xac\x12\x01\xc4\x02\x62\x5b\x8e\x58\x2b\xcb\x5f\xa0\x33\x35\xe8\x2d\x7f\xc1\x4f\xf0\x2d\xfc\x0b\x2c\x7f\x9b\xd7\xff\xc6\x82\x24\x84\x15\x14\xa7\x9a\x97\xff\x66\x82\x2f\x68\x42\x44\xb5\x5b\x6f\x39\x9f\xa4\x64\x94\xf2\x72\xab\xd8\x25\x34\xcf\x52\xbc\xfc\x3f\x17\x73\x5c\x54\x59\x5f\x72\xce\x9a\x30\x66\x8c\x17\xf5\xeb\x8f\xab\xc1\xbf\x37\xba\xe2\x6a\x18\x37\x9b\x62\x31\x27\xc2\xa5\xfc\x7f\x71\x5a\xe6\x05\x11\xdd\x46\xce\xce\x9b\x9c\x75\xa7\x24\x2c\x3f\x26\x3d\x2f\xb8\xc0\x13\x22\x9f\xb2\x3a\xe3\x69\xa3\xf9\x91\x92\x34\xd9\xbd\x80\x1a\xe1\xd5\xa6\xb1\x45\xcc\xd9\x23\x9d\xd4\x8b\x32\xba\x7e\xb8\xb9\xfd\xf8\xfe\x7a\x74\xff\xf0\xee\xcd\xd6\xe7\x57\x03\x71\x31\xaf\x5f\xf0\x19\x93\x87\x4c\xf0\x2f\x24\x2e\x1e\x68\xb2\x9b\x53\x2f\xd7\x65\xbd\xd0\x55\x5c\x1e\x22\xc5\x63\x92\x36\x8b\x8f\xea\xd5\x47\x37\xcf\xc9\x48\xce\xa6\x2c\x2b\xeb\x4d\x28\xc8\x1f\x85\xb3\x89\x3c\x75\x2c\x27\x72\x77\x7d\xfb\xdb\xbb\xd1\xf5\xc3\xeb\xd1\xe8\xe3\xa7\x5f\xef\xcd\xb3\xc9\x89\x58\xd0\x98\x3c\xe0\x38\xe6\x25\x2b\xf4\x53\x5a\x25\xbd\xd6\xe5\xe8\xe7\x75\xf7\x7c\x06\xd2\x9e\xb2\x33\x39\x2c\x08\xde\x9a\xa0\xe1\xd2\x9e\x95\x63\x22\x18\x29\x74\xaf\xb5\x5e\x10\x91\xaf\xad\x55\xee\xd0\xed\x77\x27\x33\xe2\xf6\x9a\x2b\x97\xb0\x85\x74\xc9\x26\x64\xb1\xfa\x2a\x74\xeb\x2a\xcb\x04\x4f\xd4\xa3\x5f\xf1\xf6\x97\xa6\x6b\x81\x32\x2c\x25\x09\xd1\xdf\x2f\x61\xf0\xb3\x24\x7c\xbe\x78\xfa\x2b\x00\x00\xff\xff\x97\xcb\x09\x12\x4f\x87\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 34639, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
