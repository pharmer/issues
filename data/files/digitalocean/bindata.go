// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5f\x93\x9b\x36\x10\x7f\xbf\x4f\xa1\xe1\xf9\x70\x8d\xc0\x0c\xb9\xb7\x6b\x9b\xa4\x99\xa6\x77\x99\xa9\x5f\x3a\x9d\x4c\x46\x27\x64\x42\x0d\x12\x91\xc0\x19\xf7\xe6\xbe\x7b\x07\xf9\x0f\x20\xc9\xb2\xcc\x5c\x1f\x62\x5e\x92\x43\xbb\xe8\xb7\xfc\xb4\xda\xd5\xca\xfb\x7c\x03\x80\x47\x51\x49\xbc\x3b\xe0\xa5\x79\x96\xd7\xa8\x60\x98\x20\xea\xdd\xb6\x12\x42\x37\xc2\xbb\x03\x7f\xdf\x00\x00\x80\x97\x92\x8d\x1c\x06\xc0\xfb\x86\x0e\x7f\x55\x9c\xa5\xde\x0d\x00\x9f\xe5\x0b\x9c\x64\x39\xa3\xdd\x3b\xcf\xf2\x5f\x00\xbc\x82\x61\x54\xe7\x8c\xb6\x38\xf7\xa5\xa8\x09\x4f\x51\x09\xc2\xfd\x2c\xc7\x37\x5b\x31\x2a\x45\x6f\xfc\x5f\x46\x49\x37\x9f\x1c\x92\x0a\xfb\xc7\xcf\xf2\xff\x97\xdb\xd3\x68\x3f\x23\x9a\xa1\x82\x71\x02\x02\x13\xda\x53\xc1\x03\x2b\x9a\x54\x70\x46\x7b\xc7\x11\x5d\xaf\x1a\x5e\x9b\xd1\x56\x1c\xd9\xd1\xa4\x82\x33\xda\x47\x46\x53\x46\xcd\x50\x05\xa3\x76\x28\xa9\xe0\x0c\xf5\x40\xbe\x83\xbf\x18\x5f\x9b\xc1\xe8\x16\xdb\xc1\xa4\xc2\xe5\x60\x46\x07\xa1\x5b\x6c\x77\x10\xa9\xe0\x0c\xf6\x27\xa2\xa0\x5d\x36\x9c\x0b\xcc\x00\x34\x21\x8a\x15\x83\x56\x44\xa9\xe0\x8e\x98\xd3\x0c\x55\x27\x5d\x52\x64\x95\x9d\x4c\xa9\xe0\x8c\xb6\x64\x9c\xd1\x9a\x99\xb1\x6a\x76\xc6\xfd\xa5\xc2\x10\xeb\xb8\xdb\x73\x2a\x6a\x44\x31\x59\x6e\x2b\x62\xd8\xf3\x62\xdd\xb4\x10\x41\x9c\x3d\x75\x10\x29\x11\x98\xe7\xd5\xc1\xb8\xa1\x10\xa3\x9a\x64\x8c\x6f\x5b\xc9\x7b\x42\x09\x47\x05\xf8\xd4\xf0\x8a\x09\xd2\x53\xaa\xda\x69\x93\xee\x63\x50\xe9\xdd\x81\x20\xee\x20\x72\xb1\x96\x23\xf3\x33\x51\xa4\x5b\x53\xa0\x84\x1d\xa0\x04\x06\xa0\x6c\x5d\xa0\xec\x2f\xa0\x6c\x81\xdd\x33\x54\x9e\x07\xf3\x8b\x15\x0b\x94\xe7\x81\xfe\xc0\x0b\xcc\x0b\x71\x6b\xe6\xdb\x46\xf7\x48\xb6\x03\x95\x6d\x95\xec\x70\x9a\x5c\x43\x0b\xd7\x70\x24\xd7\x50\xe1\x1a\xaa\x5c\x47\xd3\xe4\x3a\xb4\x91\x1d\x8e\x65\x3b\x50\xe9\x0e\x35\xbe\x43\x38\x4d\xc2\xa3\xc4\x42\xf8\x50\x78\x09\xe1\xb1\x42\x78\x94\x68\x0e\x9e\xcc\x7b\xb0\x15\x27\xed\xf4\xa9\x77\x07\x6a\xde\x10\xab\xc5\x36\x83\x5f\x69\x3b\x46\xaa\xb5\x13\x4d\x33\x8b\x00\x96\xa7\xd9\x56\xa4\xe6\x2c\x32\x9f\x2d\x54\x32\x27\xba\xd5\x62\x9b\xe7\xc6\xa3\x5d\x77\xae\x10\x1e\xeb\xce\x1b\x8d\xdc\x6a\xb6\xd8\x30\x36\x34\x44\x8a\xb9\x5a\x60\x48\xa6\xe9\x1d\xd8\x0f\xe2\x93\x64\x0f\x85\x27\x62\xac\x9e\xd4\xe0\xfc\x1c\x97\xaf\xcd\x9d\xca\xd5\x6b\x71\x03\x2d\xd4\xc0\x8b\xa3\x39\x5c\x5c\x09\x2d\x91\x85\x96\xe8\xe2\x9d\xb7\xb8\x16\x6f\x49\x2c\xb4\x24\x2a\x2d\x0e\x45\xe6\x95\x6c\xa3\xd2\x0f\xa0\x2d\xa4\x6b\xf2\x7e\x58\xff\x2d\xcf\xbe\x82\x3f\x48\xd9\x3e\x9e\x8b\x44\x01\xd4\x7c\x2b\xb4\x17\x34\xff\x37\x67\x03\x8e\xc6\x25\xc3\xd2\xb7\x5e\x72\xa8\x62\x47\xee\xd4\x58\xa5\x7b\x5f\x38\x32\x79\x97\x3e\x84\xb6\x13\x87\x26\x77\xb4\x38\xd4\x6a\x57\xa8\x05\xd8\x85\x7d\xc7\xfc\x10\xab\x6d\x2d\x45\x55\xb1\x23\x77\x6a\x08\xd6\x53\xf6\x9b\xd1\xab\x6d\x3d\x5e\xaa\x62\x47\x7b\xd5\xd8\xa8\x9f\x2d\xfb\x47\x8c\x8b\x0c\x16\x7e\xb0\xc1\x55\xe3\xdb\x6e\xb2\x8c\x3a\x8e\x97\x55\x67\x73\xfc\x75\x1e\x23\x0f\x94\xd9\x9c\xd7\xa8\x63\xa6\x55\xf3\xcf\xb3\x67\x84\xeb\xa6\x35\x74\xa0\x35\x3c\x4f\x6b\xa8\xd2\x3a\xd1\xfb\x05\xe1\x43\x07\x6f\x35\xe8\x38\xde\xa2\x4e\x9c\x56\x5b\x46\x30\xea\x38\xd6\x4f\x13\x2d\xd1\x85\x1f\x3a\xa4\x2c\x83\xce\xfe\xe0\x74\x2e\x65\x4d\xd6\x5b\x23\x49\x99\xad\x34\x31\xea\x38\x96\xb5\x53\xfd\x8d\x50\xf8\xf1\xce\x15\x6d\x65\x8b\x59\x69\xc7\xac\x56\xd6\xe9\xb5\xc9\x44\xaf\x72\x85\x9f\xec\x52\xbd\x3d\x71\x99\x94\xcc\x07\x6b\xbd\x10\x88\xaf\xfe\x17\xc0\x63\x8b\x01\xe6\x24\x25\xb4\xce\x51\x61\x68\x30\xa8\x38\xdb\xe4\x29\xe1\x2d\xa3\xbf\xee\x9a\x97\x1e\x8f\xcd\x4b\x07\xc2\xaa\x02\x6d\xdf\x31\x5e\xa2\x5a\x36\xe0\xe4\xa4\x48\x3b\x39\xa2\x94\xd5\xb2\x53\xa2\x9d\xfe\xb9\xb3\x09\x17\xac\x49\x67\xd5\x57\xc4\x4b\xc2\x67\x39\xfb\x09\x17\x8d\xa8\x09\xf7\x3b\x83\xda\xe9\xfa\x9f\xa1\xbd\x92\x52\xa1\xaa\xef\xb5\x5f\x8e\x06\x48\x7b\x86\xeb\xd7\x59\xb1\xeb\xc0\xc2\x8c\xae\xf2\x4c\x7e\xe3\x87\xf7\x1f\x96\xf7\x1f\x1f\x7f\x79\x7b\xff\xf0\x65\xf9\xf8\xfb\xdb\x87\x1e\x7e\x3b\x19\xe3\xa5\xda\xc8\xf5\xa5\x66\x6b\x42\x87\x7a\xff\x88\x43\xf3\x87\x26\x2a\xd0\x13\x91\xa6\x7e\x22\x5c\x30\x8a\x0a\x70\x8f\x31\x11\x02\x2c\x75\xdd\x9c\x56\x8d\x24\xb5\x42\x42\x7c\x67\x3c\xf5\x8e\xd2\x97\x13\xcb\xb9\x6e\x9e\x08\xa7\xa4\x36\xb5\x8b\x6c\x08\x17\x87\x36\x85\x59\x32\x9b\x77\xab\xb4\x6f\x43\xeb\x2d\x4f\x4a\x36\xfb\x3a\xb2\xb7\x00\xb2\x15\x4d\x1b\xfd\x86\xfa\x15\xe7\xc1\x34\x75\xf3\x0e\xc0\xdf\xb8\x80\xaf\x50\x21\x0c\xe8\xea\xb0\x84\x97\x83\x43\xfc\x96\x92\x9b\x97\xff\x02\x00\x00\xff\xff\xaf\x16\x37\x92\x80\x27\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 10112, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
