// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\x4d\x73\xdb\x36\x10\x86\xef\xfe\x15\x18\x9e\x23\x97\x00\x3f\x4c\xfa\xd8\x69\x9a\x76\xda\x3a\x3d\xf8\xd6\xc9\x64\x10\x11\x96\x18\x51\x00\x03\x90\xca\xb8\x19\xff\xf7\x0c\x20\x4a\xa4\x00\x38\x0b\xc3\xb9\xd8\x12\xb8\xc4\xfb\x08\x78\x77\xf1\xf1\xed\x0a\xa1\x84\xd3\x3d\x4b\x6e\x51\xd2\xb5\x5c\x34\x2c\x79\xa3\xdb\x18\x3f\xa8\xe4\x16\xfd\x77\x85\x10\x42\x49\xc3\x0e\xa6\x19\xa1\xe4\x0b\x3d\x7d\xea\xa5\x68\x92\x2b\x84\x3e\x98\x17\x24\xdb\xb4\x82\xcf\xef\x7c\x33\x7f\x11\x4a\x3a\xb1\xa6\x43\x2b\xb8\x56\xf8\xdc\x4f\x2f\x9f\x5f\xd0\xad\xb4\x5f\x71\x21\x87\x2d\xa3\x6a\x98\x9f\xff\x2f\x38\x9b\xbb\x33\x4d\x17\x81\x53\xf3\x07\xf3\xff\xe9\xcd\x6b\x44\x57\x98\x06\xeb\xea\xd8\x60\x69\xb5\x79\x46\x5a\x89\x71\xd8\x42\x9a\xc7\xa0\x60\xb1\x69\xea\x2c\x31\x36\xae\xd6\x8c\x0f\x92\x76\x3f\x94\x5b\x84\x05\x0b\x8e\xbb\x67\x04\xbf\x32\x60\x22\x4f\x31\xe1\x52\xca\x27\x35\xaa\xa0\xdf\xb6\x08\x7b\xbd\x20\x68\xd2\x53\xcc\xeb\xa5\xcc\xfc\x87\xe8\xcd\x81\xaf\x17\x05\xe7\xee\x14\x73\x29\x75\xae\x03\x2d\x57\x03\xe5\x6b\x76\xff\xd8\x33\x4f\x35\x50\xbb\x51\x0b\xe1\x59\xa2\x61\x6a\x2d\xdb\xfe\x04\xf6\xb7\x29\x42\x08\xa7\x24\x9f\x63\xd6\x74\x60\x1b\x21\x1f\x75\xc0\x3b\xc6\x99\xa4\x1d\xfa\x77\x94\xbd\x50\x0b\xcf\xaf\x7b\xdd\x35\x9e\x7f\x16\xdd\x5f\x7c\x6f\x5a\xb5\x4b\x6e\x11\x49\x17\xd2\xbd\x64\xba\xef\x26\xb9\x45\x83\x1c\x99\x77\xd8\x4e\xc8\x29\xc8\x5c\x66\xd5\x33\xd0\x7f\xb4\x9b\x2d\xfa\x87\xed\xf5\x57\x08\xb8\xfc\x69\xc4\xe0\x28\x67\xe4\xa6\xac\x5e\x4c\x4c\x2c\xe2\x8c\xd8\xc4\x79\x2c\x31\x81\x88\x4b\x9c\xe7\xe9\x8b\x89\x73\x8b\xb8\x4c\x6d\xe2\x3a\x96\x38\x0b\x71\x72\xfa\x72\xe4\xca\xb6\x45\xea\x30\x93\x34\x16\x3a\x87\xa0\x49\x9a\x57\x11\xd0\x0b\xef\x1e\xa9\x89\x4b\x9d\xc5\x9a\x03\xf4\x86\x86\xfe\x29\x35\xc3\xf1\x73\x16\x89\x0c\x9a\x23\x4f\xeb\x32\x0a\xd9\xce\xc1\xdc\x49\xc1\x2a\x0e\x19\xb4\x46\x85\x6b\x12\x85\x6c\x27\x61\xe5\xe4\x60\x19\x87\x5c\x80\x29\x48\x48\x15\xe7\x0c\xdb\xcf\xd8\xb1\x06\xae\x49\x1c\x75\x09\xda\x39\x2f\x6e\xe2\xcc\x61\xd7\x0e\xe2\xb8\x23\xab\xf2\x38\xea\x1b\xd0\xd1\x35\x2e\xe2\xfc\x81\x1d\x4f\x3b\x0e\xb9\x29\x23\x5d\x5d\x81\xeb\x4a\x51\x64\x71\x83\xed\xd4\xbc\xd2\x19\x6d\x8c\x8b\x48\x93\xd4\x21\xd9\xf8\x4c\x9d\x86\x2a\x48\x6a\xe7\xa3\x53\xaa\x71\x91\x45\xa6\xe4\xa6\x5c\x6d\xdb\xcd\x76\xcf\xf6\x2b\x70\x13\x42\xf2\x77\xbf\x82\x15\xd9\x19\x53\xb3\x42\x85\x22\x80\xb9\x96\xa5\xa9\x07\xc2\x9e\xd9\xcc\xb7\x9a\x55\xb8\x0c\xe5\x00\x57\xb0\xbc\x72\x29\xe0\xac\xd0\x8b\x48\x28\x02\x58\xde\x6b\xcf\x40\xd8\x95\xbb\x76\xb7\x4f\x24\x7c\x14\xc0\x5c\xc4\x85\x87\xc1\xd9\x0f\x15\x9e\xfd\x90\xde\xb4\x00\x14\x9c\x6a\x8d\x1f\xb8\xf2\x8e\x1e\x21\x60\x53\xba\x47\x8b\xa2\x04\xf5\xf5\xe9\xa8\xa1\xb2\x09\xc8\x8b\x80\xb4\xb0\x09\x0a\x4c\x5e\x40\x00\xa6\x45\xe9\x4b\xcd\x80\x7a\x97\xe1\xf4\x86\x04\x73\xc0\x69\x11\x90\x15\x36\x83\x29\x8c\xc1\x04\xe0\xd9\xae\x2e\x3d\x0c\x76\x05\xad\x9d\xa3\x1b\xae\xcb\x32\x05\xeb\xd4\xcc\x01\xa6\x27\x26\xbe\x12\x61\x27\x28\x26\x4e\x91\x20\x25\xd1\x47\xa7\x50\x92\x0c\x9c\x14\x5c\x7b\x0c\x9a\xd9\xf3\x72\xb1\x3d\x9a\x4a\x66\x9d\x05\x54\x8b\x33\x09\xbc\x21\x85\x0b\x96\x33\x1a\xe6\xa8\x1e\x8c\x00\xe6\x09\xf6\xb8\xc3\xd9\x3a\x3a\xe6\x30\xa7\xef\x60\x08\xb0\x6c\x66\x9e\xf9\xb0\xab\xa6\x7b\x54\x37\x1b\x9f\x09\xe2\x7c\x89\xb3\x96\xac\x61\x7c\x68\x69\xe7\xb9\xc2\xe9\xa5\x38\xb4\x0d\x93\xb3\x74\xb2\xec\xb4\xef\xe8\xe3\xef\x42\xee\xe9\xa0\x03\x1e\x5a\xd6\x35\xf3\x73\xca\xb9\x18\xcc\x25\x94\xee\xf8\xd4\xa5\x56\xec\xc4\xd8\x5c\xf7\x5b\x2a\xf7\x4c\x5e\xb7\xe2\x97\x75\x37\xaa\x81\xc9\xd5\x8c\xa2\xbb\x3b\xf7\xe4\x7b\xa5\xe1\xca\x0e\x9f\xa2\x9f\xce\x00\x86\xe7\xf2\x46\x6b\xa6\x38\xde\x7b\xaf\x05\x7f\x68\x37\xe6\xd7\xfd\x79\xf7\xfe\xb7\xb7\x1f\xef\xdf\xff\xf5\xf6\x6e\xa1\xac\xbb\x11\x72\x3f\x5f\x99\x7f\x1c\xc4\x8e\xf1\xcb\x88\xcf\xea\x38\x39\x9e\x47\x1d\xfd\xc4\x0c\xde\xbd\xfb\xac\xe5\xfd\x68\x06\xae\xa7\x4a\x7d\x15\xb2\x49\xce\x4f\x9f\xa6\x4f\xf6\x8d\xdb\x6e\xfc\xc4\x24\x67\x83\xef\xba\xed\xc0\xa4\x9a\x5c\x82\xaf\xab\xeb\x45\x99\x9b\x2e\xf8\x17\x53\xd0\xb0\xc3\xb4\xb3\x5b\x0c\xb2\xb9\xe4\x77\x5a\xbf\xd0\xe5\x1e\xf0\x84\x66\x9b\xf8\x42\xbc\x0e\x11\x7f\xa0\x9d\xf2\xa8\xdb\xcd\x46\xde\x34\x5e\xea\xeb\x21\xb9\x7a\xfa\x1e\x00\x00\xff\xff\x8c\x10\x2b\xa7\xd4\x18\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 6356, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
