// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package eks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9c\x5b\x6f\xdc\xb6\x12\xc7\xdf\xfd\x29\x04\x3d\xc7\x3a\xa6\xf6\x66\xfb\x2d\xf0\xf1\x39\x08\x82\x22\x45\x9d\xb4\x28\x8a\xc0\x50\x24\x5a\x66\xbd\xba\x84\xd4\xda\xde\x04\xfe\xee\x85\xf6\x2a\x93\xb3\xfc\x2f\xc1\x30\x7d\x69\x03\xea\x27\xe9\x4f\x72\x66\x38\x1c\xae\xfc\xfd\x24\x8a\xe2\x3a\xab\x78\x7c\x19\xc5\xd9\x93\x8a\xdf\xf4\x0d\xbc\x7e\x54\xf1\x65\xf4\xd7\x49\x14\x45\x51\x5c\xf0\xc7\x55\x73\x14\xc5\x5f\xb3\xed\xbf\x5a\xd9\x14\xf1\x49\x14\x7d\x5e\xdd\x20\x79\x29\x9a\x7a\x7f\xcf\xf7\xd5\x7f\xa3\x28\x9e\x37\x79\xd6\x89\xa6\xee\x1f\xff\xbb\x90\xa5\xa8\xc5\xf6\x11\xbb\xdb\xfa\x6b\x0b\x75\xca\x33\xd5\x9d\xb2\xfd\xc5\x6f\x4d\xcd\xf7\x4f\x5c\x35\xed\xa8\xfd\x33\x86\xad\x5f\xc8\xd6\x9c\x6c\x2d\xc8\x56\x4e\xb6\xde\xc5\x9b\xc6\xcf\xab\xff\xbf\xbc\x39\xdc\xc7\x0f\x92\x97\x4d\x7d\xa0\x87\x4f\x5c\x75\xa7\x29\xea\xe1\x9a\xd2\x7b\xb8\x6e\xd5\x7b\xb8\x6e\xcd\x35\x7d\xbb\x69\x11\xb5\xea\xb2\x3a\xe7\x1f\x97\x2d\x27\x26\x47\x3d\x2c\x7a\x65\x39\x4b\x2a\x5e\x88\x45\xb5\x57\x56\x70\x95\x4b\xd1\x6e\x7b\x45\x10\x79\xd6\xf1\xb2\x91\xcb\xfe\xf2\x55\x53\xb5\x8b\x8e\x47\x4d\xdb\x89\x4a\x7c\xe3\xc5\x00\x6b\xfb\x57\xa4\xfb\xf1\xc8\xaa\xf8\x32\x62\xc9\x8c\x1c\xc9\xbd\xa0\xe7\x79\x26\x4b\x6e\x13\xa4\x13\x4e\x82\xce\x35\x41\x76\x39\xa3\x24\x45\x7a\x08\xc4\x4b\x10\x9b\x00\x45\x63\xac\xc8\x40\x9c\x14\xb1\xa9\x26\x69\x74\x06\x24\x9d\x63\x49\x06\xe2\x24\x69\xa4\xdb\xd1\x14\x49\x82\x82\x7c\xe4\xe8\x6a\x46\xc9\x0c\xcd\x1a\x1e\x21\xaf\x01\x1a\xeb\x66\x9d\xd8\x05\x8d\xb1\x61\x13\x48\x48\xc3\x1e\x63\xc3\x26\x90\xa0\x86\x3d\xc6\x86\x4d\x20\x6e\x86\xad\x4b\x02\x86\x3d\x46\x86\x6d\x00\x61\x0d\x7b\x0c\x0d\xdb\x24\x82\x1a\xf6\x24\x61\x70\xd2\x28\xc6\x49\xd4\xcc\x58\xd6\xc6\x63\xa0\x0a\xba\x1b\x81\xf8\xb9\xdb\x14\x28\x82\xee\x46\x20\x9e\xee\x96\x02\x49\x17\x58\x92\x81\xf8\xb9\xdb\x0c\x49\x82\x82\x7e\xa4\xbb\x21\x23\xc2\xc3\xf3\x43\x7d\xed\xdc\x2a\x27\x4f\x71\x78\xa4\x18\xdf\x85\x1f\x04\x80\x92\x61\xcb\xa6\x98\xa1\xac\xff\xff\xfa\x29\xda\x66\xd0\x0a\x9a\x75\x9a\x02\x49\x92\xe1\x91\xa2\x98\xa1\xa4\x5f\x78\xd5\xc8\xa5\xc3\x40\xa5\xf6\x90\x54\xa4\x30\x24\x51\xc8\x50\xd2\x4d\xd7\xc8\xac\x74\x08\x49\x53\x06\x14\xa1\x89\xa3\x10\x27\x45\xc6\xdc\xb1\xd4\x1a\x00\x0a\x6c\xe3\x14\xe2\xa4\xc9\x88\x49\x78\xe6\xb0\x24\x2f\x45\x7a\x1c\x18\x01\x9f\xbb\x63\x09\x9b\x02\x4d\x24\x33\x54\xf5\x36\xcf\xf9\x9c\xcb\xac\xe3\x45\x94\xaf\xc2\x82\xa8\x4b\x5d\xd9\x54\x97\x76\x31\xb3\x2e\x73\x77\x0c\x5a\x39\x85\x38\xeb\x32\x16\x5f\xbb\x59\x95\xd8\xf9\x28\x44\x0f\x51\x1f\x7e\x4c\xea\x5d\x62\x23\xa7\x90\xa3\xd5\x38\x6e\xde\xca\x11\xb6\x26\x92\xf1\xb7\xa6\xf1\xb9\x75\xc9\x2b\xf1\xe6\x9b\x42\x9c\x75\xb9\x46\xa9\x12\xef\xc0\x29\xc4\x59\x97\xeb\x1a\x73\x7f\x44\x5c\x20\x19\xa7\x68\x65\xcc\x62\x3a\xb1\xc6\x84\x7b\x1c\x13\x28\xc4\x6b\xe5\xb3\x67\xbe\xf7\x38\x65\xa1\x10\xbf\x95\x6f\x8a\xa6\x0e\x99\x14\x85\xb8\x2d\x7c\xc6\x2e\x2a\xb5\xba\xdf\xbd\x3a\x42\x14\xc5\x78\xa6\x08\xcc\x5a\x23\x14\x38\x96\x53\x48\xc0\x44\x4a\xe0\x44\x8a\x42\x82\x26\x52\x02\xaf\x31\x14\xe2\x67\x4f\x20\x3c\x09\x98\x48\x11\x44\xd0\x44\x4a\x1c\xb1\xf4\x91\x8c\x5f\xc0\x04\xcb\x9e\xc0\x55\x70\x0a\x09\x69\xe1\x78\x21\xa6\x90\xb0\x16\x8e\x17\x61\x0a\x09\x6b\xe1\xa8\x0e\x6e\x02\x4e\x7a\x8c\x00\x3e\x49\x52\x64\xe0\x15\xef\xb2\xb9\x4d\x90\x06\x0c\x05\x7d\xaa\x1f\xea\xe6\xa9\xd6\x65\x9c\x32\x4d\xc7\x84\xa1\xa9\xc2\x33\xf5\x53\x1d\xbf\x62\x60\xa2\x4c\xe0\x55\xfa\xcd\x6b\x2e\xb3\x79\xd4\x2e\x64\xdb\x28\x8e\xa6\x09\xd4\x50\x2b\x78\x2a\x48\x10\x0e\x72\xf4\xd9\x42\x45\xe6\x8a\x25\xaa\xca\xe6\x87\x8d\xc6\x04\x3c\xd4\x80\x13\xca\x0a\x9e\x50\x12\x84\x83\x1c\xdd\x72\xec\x5b\xb7\x0a\x27\x1f\x14\xe2\x52\x58\x32\x4c\x79\x9c\x58\x9d\xab\xc2\xd9\x07\x85\xb8\x48\x32\x16\x8b\xf3\xc4\x1a\x06\x2b\xb8\xd0\x13\x84\x8b\x20\x23\x0e\xce\x12\xeb\xfa\x55\xe1\x15\x95\x42\x1c\xcc\xc8\xd8\x80\x58\xb7\xdc\x15\x5a\x27\x4c\x20\x60\xf8\x19\xc1\xf0\x63\x12\x21\xc3\x0f\x5c\x2d\x08\x22\x9c\xc7\x8f\x13\x76\x86\xf4\x50\x8c\x8b\xa2\x33\x5d\x92\xbd\x62\xd3\xbf\x0f\xa5\xad\x24\xe3\xa0\xc9\x75\x97\x5f\xe1\x13\x6e\x0a\xf1\x71\x31\x7b\x58\xc4\xe7\xdb\x14\xe2\x62\xd7\x6e\x3b\xfc\x0a\x1d\x25\x9b\x80\x87\xcf\x5b\x37\x18\x15\x3c\x45\x26\x08\x1f\x0f\xb3\x5b\xce\x24\x61\xd0\x74\x28\xc6\x45\x91\x51\xa1\xbd\xb0\x5b\xcf\x24\x49\xa1\xf9\x50\x8c\x83\xa6\x0b\xe3\xb8\xf6\xdc\x6e\x40\xf8\x50\x9b\x42\xc2\x79\x18\x3e\xd2\xa6\x90\x80\x1e\x86\x4e\x8f\x4d\x20\x98\x87\xc1\xb3\x63\x82\x08\xe6\x61\x6d\x8a\xd7\x0b\x92\xf1\xaf\xf0\xcf\xec\x36\xd4\xe2\x32\x15\x85\xf8\x57\xd2\x41\x09\xa6\x85\x19\x2c\x41\x38\xab\xd2\x07\xcb\x5e\x84\x69\x8f\x28\x56\x91\x4c\xf0\x73\x9a\x16\xa7\xd7\x14\xe2\x7d\xea\x07\xc7\x0b\xda\xd6\xbf\x71\x4a\x23\xf1\x68\x51\x88\xd7\x86\xcd\x3a\x50\x12\x57\xf7\x28\xc4\x45\x90\x6b\x71\x4f\xe2\xb9\xa3\x90\x90\x3f\xe0\x90\x68\xcf\x66\x02\x5e\x5b\x5a\x54\xda\x93\x70\x9b\x44\x10\x5e\x85\x08\x50\x53\x93\x47\xec\x4a\x48\xc6\x45\x94\x6b\x68\x92\x78\x5b\x42\x21\x01\x9d\x0d\xef\x4b\x28\x24\xa8\xb3\xe1\xdf\xdd\x52\x48\x50\x67\x43\x9b\x25\x13\x08\xeb\x6c\x70\xc7\x44\x10\x21\x9d\xad\x63\x49\x25\x72\xd9\x1c\xd4\x63\x02\xaf\xe4\x68\x97\xc8\x42\xcd\x59\x32\x65\x23\xab\x08\x5c\x0d\xa5\x90\x60\x3b\x92\x2e\x05\x56\x63\x02\xa1\x36\x00\x5d\x8a\x8a\x6a\x04\xe1\x21\xc6\xea\x4d\xfd\xab\xec\xc6\x62\x00\x3e\x05\x7d\x20\xa5\xce\x6a\xab\x92\xd7\xd7\x3d\x84\x20\x17\x4a\xc1\x31\x87\x09\x78\x88\x41\x86\x8b\xfd\xe8\xa7\x6d\x17\x9f\x8f\xf8\x19\x11\xc9\x78\x2d\xe4\xe0\x97\x85\xcf\x2c\x19\xa1\x60\x43\x32\x4e\x2b\x67\x6a\xd6\x89\x26\xd6\x99\x7b\x66\xfc\x98\xc1\xa2\x20\xaf\xd1\x3a\x46\x17\x1e\x2e\x82\xf1\xc9\x7c\xc0\xa2\xde\xbf\xef\x88\x39\xa4\x20\xbf\x49\x1c\x5d\x9c\x41\x61\x28\x29\x23\x19\xaf\xac\x0c\x64\xae\xfd\x0b\x51\x5a\x46\x32\x5e\x79\x19\xf4\x42\x8e\x22\x15\x85\xf8\x64\x42\xbb\xe4\x75\xf7\xad\x6d\x2e\x79\xc1\xeb\x4e\x64\x73\xe2\x4b\xdb\x56\x36\x8f\xa2\xe0\x72\xb5\x7d\xff\xe3\x66\x20\x53\xa8\x76\x9e\x2d\xff\xd7\xc8\x2a\xeb\xfa\xab\x77\x82\xcf\x07\x6f\xcf\xea\xba\xe9\x56\x5f\x17\xf7\x4f\xdd\x3e\xaf\x7f\xdd\xbc\x59\x14\x49\x7b\x9f\xc9\x8a\xcb\x44\x34\xff\xc9\xe7\x0b\xd5\x71\x79\xba\xd7\xd1\x3f\x6e\xf7\x24\xea\x96\xa2\x56\x2e\xb8\x5a\xff\xde\x41\xbf\x65\x73\xc7\xcb\x4e\xf3\xaa\x0b\xaf\xbf\x6b\xde\x0b\x5f\x7f\x5d\x9e\x37\xf5\x9d\x28\x37\xa3\x71\xfb\xf6\xea\xea\xfa\xe6\xe6\xf6\xfd\xf5\x9f\xb7\xef\xfe\x3b\x90\xd0\x3f\xab\x91\xfd\x70\xc7\xd9\x93\xba\xcd\xf2\x9c\x2b\x75\xfb\xc0\x97\xb7\xa2\x78\x8d\xfd\xad\xd6\xd3\xbc\x46\xde\xf3\xa5\xfe\x9c\x79\xf6\x85\xcf\xb7\xc5\x13\xa5\xa2\xf7\x7c\x19\xbd\xd3\x1e\x22\xea\x76\xb1\x9a\x83\x8e\x3f\x77\xf1\xee\xca\xcb\x9b\x23\xbb\x71\x73\x7d\xf5\xdb\xf5\xc7\x41\x6f\x0e\x77\x45\xf1\x5c\xf2\x6e\xd0\x23\xba\x3b\x6b\xec\xed\xb6\x53\x07\xba\x74\xb3\xa2\xa2\x7d\xcf\x0e\x74\xab\xcd\x94\x7a\x6a\x64\x31\xe8\xda\xe6\x5f\xfa\x77\xe3\x0f\x8b\x2f\x5c\xd6\xbc\xa3\x3e\x1a\x7f\xe4\x52\x6d\x9c\x8a\x25\xec\x6c\x6f\xaa\x9b\x3f\x1a\x30\xb0\xd1\x82\x3f\xc6\x97\x51\x27\x17\x7c\x60\x56\xab\x3f\x1c\x60\xb4\x7e\xcd\x36\x6d\x27\x43\x65\xab\xa1\xff\x7c\xf2\xf2\x4f\x00\x00\x00\xff\xff\x83\x50\x34\x6d\xa6\x40\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 16550, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
