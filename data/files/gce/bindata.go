// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x5d\x6f\xda\x48\x17\xc7\xef\xf3\x29\x46\xbe\x7a\x1e\x09\xbc\xf8\x25\x40\x72\xd7\xd0\x6c\xb7\x95\xba\x8d\x92\x74\x6f\x56\x55\x34\xd8\x03\xb8\x31\x33\xee\x8c\x4d\x97\xad\xf2\xdd\x57\x76\x00\xe3\x79\x81\x01\x92\x4a\xeb\x3d\x37\xbb\xed\x9c\xe3\xf1\x7f\xc6\xe6\x77\x4e\xf1\x5f\xf8\xc7\x19\x42\x0e\xc5\x73\xe2\x5c\x22\x67\x1a\x11\xa7\x53\x0e\x10\xba\x10\xce\x25\xfa\xf3\x0c\x21\x84\x9c\x98\x2c\xaa\x61\x84\x9c\x6f\x78\xfd\xa7\x8c\xb3\xd8\x39\x43\xe8\x4b\x75\x00\x27\xd3\x84\xd1\xfa\x98\x1f\xd5\x7f\x11\x72\x52\x16\xe1\x3c\x61\xb4\x9c\x7e\x34\xc3\x74\x3a\x2b\x30\x1a\xb1\x82\xe6\xcb\x0e\xba\xc7\xc9\x77\x4c\x57\x33\x6e\x66\x29\x53\xb1\x48\x70\x97\x60\x91\x7b\x75\xf4\x6f\x46\x49\x7d\x86\x6a\xa8\x4e\xeb\xe2\x4d\x62\x73\x7c\x6c\x18\x8f\x9c\xd5\xf0\x97\xea\xff\x4f\x1d\xb3\xee\x7b\xf6\xb8\x64\x1d\xf4\x01\x67\x3b\xc4\x52\xc6\xf3\x99\xa5\xe2\x3a\x57\x23\x7b\x2b\xa8\x6a\xdf\x0a\x1e\xb0\x00\xa3\x68\xc1\x8a\x7c\x66\x21\xf8\x39\x4f\x23\x76\x15\x50\x85\xae\x02\x2f\x26\xd2\x72\x67\xeb\x5c\x93\xd8\xf5\xce\x9e\xa6\xab\x10\x39\xc7\xe9\x01\xe2\x34\x07\x48\x0a\x75\x19\xe3\xbd\x19\x07\x6c\xf0\x5d\xee\xa2\x77\xb3\x44\xa4\x38\xa1\x1d\x74\x45\xd2\x69\x52\xcc\x75\xab\x23\x05\x67\x19\xe9\x7e\x27\xfb\x56\xb5\x9d\xd8\xd4\xda\x88\x44\xc6\x48\x7c\xda\x65\xd8\x9a\xcb\xb7\x15\xea\x37\xb7\xbd\x11\x31\x2d\xc1\x3f\xf5\x3e\xde\x9a\x2b\xb0\x15\x1a\x18\x85\x06\x46\xa1\xc1\x0b\x0a\x0d\x6d\x85\x86\x46\x39\xe1\xa9\x72\x2a\xdc\xe1\x39\xe1\x49\x64\x4d\x58\xc3\x31\xcd\xdd\x34\x25\x8d\x6d\x92\x4e\x5c\x54\xf5\xe9\x5d\x4f\xbb\x7f\x3d\x6a\x7a\x73\x29\x9a\xf8\x78\x4f\xfc\x80\x05\x94\xa5\x3a\x4a\x52\x74\x95\x16\x93\x89\xe8\xa0\xf7\xec\x3b\xd6\x2d\xaa\x10\xdd\x88\xd0\x92\x4f\xbb\x57\xb3\x95\xd7\x5c\xc6\x76\x60\x6c\x0a\x44\xa6\xc0\xc4\x7e\x45\x57\x84\x3f\x92\x94\x2c\x37\x5d\xc8\x5d\xb9\x41\x68\x84\x39\x4b\x13\x6a\x5a\xdc\xfe\xeb\xb4\x4e\x52\xd4\xaf\xf7\x5c\x37\x7a\x22\x00\x57\xf3\xec\xfe\xa8\xae\x93\x94\xfd\x7e\x1e\xd5\xc9\x3d\xe8\x83\x7b\x3f\x23\xe8\x2d\x4e\x53\x22\x3a\xe8\xd3\xad\x41\xe6\xfe\x62\xb2\x4e\x52\x64\x6a\xca\xcb\x66\x54\x96\xb9\x69\x48\x13\x2a\x72\x4c\x23\x72\xbf\xcc\x88\xa6\x2d\x15\x8f\x45\x29\x6c\xe2\x75\xe7\x49\xc4\x59\x2d\x2c\x26\x22\xe2\x49\xb6\x5e\x9b\x87\x16\xa3\x9b\xcf\xe8\x7f\x62\x86\x39\x89\x51\x36\x5b\x8a\x24\xc2\x29\x8a\x18\x27\xff\x47\x98\xc6\xa8\xe7\xf6\xd1\xbb\x2b\x74\xfb\xe6\x63\x3d\x49\x94\x95\xb3\x7b\xf5\x4e\xe0\xb9\x73\x59\x66\xd6\xa7\x49\xc4\xa3\x73\x89\x82\xde\xc0\x7f\xb5\xfe\x76\x47\xef\x78\x4a\xd7\x69\xe8\xf4\x8e\xe9\x0d\x77\x34\x68\x7b\xba\xb7\x7d\x6d\xd1\xcb\xb4\x56\xa6\xb6\xe5\xb8\x56\xc7\xd4\x5b\x1c\xd7\x8f\x98\x1a\x80\xe3\x9a\x06\x53\xfd\xde\x55\xd9\x2d\x2a\xe5\x4b\xd6\xdc\xdd\x25\xed\xf4\x92\x68\xa8\x2c\x2f\x5a\xa4\x74\x25\xe0\xb0\x72\xa1\x63\xf5\x61\x5c\xd7\x61\xf4\x14\xe4\x76\xb4\x64\x9d\x7a\x5d\x31\xc7\x69\x7a\x02\x59\x3d\x77\xa0\x92\x15\xe7\x64\xca\xf8\xb2\xfa\xf7\x4c\x73\x7e\x3d\x74\x3d\x77\x00\xd0\x05\xe8\x02\x74\x01\xba\xed\x87\x2e\xf5\xba\xb3\x64\x3a\x8b\xb2\xa2\xeb\xf5\xcd\xe4\xed\x57\xe8\x15\x1d\xe4\x85\x6e\xb8\x13\xb1\xbf\x25\xd3\x19\x1a\xdd\x7c\x56\x28\xdb\x97\x31\x1b\xba\xa1\xcc\xd9\xfe\xf9\x79\xd0\x07\xd0\x02\x68\x01\xb4\xfb\x92\x00\xb4\xff\x5a\xd0\xfa\x46\xce\xfa\x1b\xcc\xba\xc3\xa3\x28\xeb\x2b\xbd\xec\x10\x18\x0b\x8c\x95\x23\xc0\x58\x60\x6c\xbb\x19\x1b\x98\x21\x1b\x6c\x28\xeb\x0f\x75\x98\xad\x40\x1a\xc8\x24\x2d\x73\x01\xa5\x80\x52\x39\x02\x28\x05\x94\xb6\x1d\xa5\xe6\x2f\x06\x4c\x69\x36\xbd\xea\x1e\xc4\x92\x8c\x93\x72\x9a\xd8\xb9\x44\x39\x2f\x88\xa5\xda\xd0\xa8\x35\x5c\x63\x3f\xd0\x3d\x7f\xb3\x10\x1c\x4a\x7a\x03\xf5\xe9\x1c\x54\x04\x4d\x00\x2a\x02\x54\x04\xa8\x08\x2d\xaa\x08\x7d\x33\x64\xfb\x1b\xca\x9e\x0f\x8c\x36\x87\xbe\x4c\xd2\x32\x17\x50\x0a\x28\x95\x23\x80\x52\x40\x69\xbb\x51\x3a\x34\x92\x74\xb8\x06\xe9\xc0\xf5\x8f\x6a\x57\x87\x12\x64\x07\xae\x0f\x8c\x05\xc6\xca\x11\x60\x2c\x30\xb6\xdd\x8c\xbd\x30\x7f\x7f\x71\xb1\x31\x36\x0c\x4d\xcd\xea\x85\x6c\x5c\x18\xf6\x7f\x82\x71\xe1\xd5\x3e\xee\xd6\x1f\x50\xab\x7b\xf0\xb0\xab\x79\xc0\x75\x9b\x93\xb9\xa5\x21\xa5\x67\xe1\x47\xf9\x48\xe6\xe5\x5f\xa5\x2b\xab\x5a\x52\x7a\xe0\x48\x81\x0a\xa9\x44\xa0\x42\x42\x85\x6c\x6f\x85\x2c\x49\x6b\xe3\x48\x09\x8e\xc5\xac\xe2\x49\x09\x00\xb2\x00\x59\x39\x02\x90\x05\xc8\xb6\x1b\xb2\x76\x96\x94\x9e\xbd\x23\xa5\x07\x86\x14\x00\xa9\x12\x01\x90\x02\x48\xdb\x0e\xd2\xbd\x86\x14\x25\xcd\xb2\x57\xdd\x0d\xd9\x23\x2c\x29\xa5\x10\x0b\x4b\x8a\x6f\xe1\x48\xd1\x2b\x96\x1f\xa5\xfa\xf0\x20\x15\x8a\x82\x12\x81\xa2\x00\x45\xa1\xdd\x45\xc1\xca\x93\x12\x7a\xd6\x96\x94\xd0\x03\x90\x02\x48\x95\x08\x80\x14\x40\xda\x6e\x90\x5a\x38\x52\xce\x2d\x0c\x29\xfa\x6e\x55\xf6\xa4\x9c\x83\x25\x05\x20\xab\x44\x00\xb2\x00\xd9\x76\x43\xd6\xca\x92\xd2\xf7\x35\xd6\x06\xbd\x27\xa5\xef\x83\x25\xe5\x35\x2d\x29\x22\xc7\x34\xc6\x3c\xee\x7a\xc6\xeb\xf6\xfc\xeb\x54\x1d\x14\xb8\x83\xf3\xdd\x3f\x42\xb5\x9a\x4b\xbe\xa8\xf2\xef\x50\x95\x13\x41\x75\x84\xea\x28\x47\xa0\x3a\x42\x75\x6c\x67\x75\xac\x29\x6b\xe3\xfc\xeb\xf7\x8e\xc3\xac\x52\x3b\x7b\x40\x59\xa0\xac\x1c\x01\xca\x02\x65\x5b\x4e\x59\x0b\xd7\xdf\xc0\x3d\xae\x97\x95\x1f\xa3\x0e\x5c\x68\x65\x01\xb2\x4a\x04\x20\x0b\x90\x6d\x39\x64\xad\x5c\x7f\x9e\xaf\xe9\x65\xf5\x86\x14\xcf\x87\x76\x15\x48\xaa\x44\x80\xa4\x40\xd2\xd6\x93\x74\xa7\xed\x4f\x9f\x67\xd3\xac\xee\x66\xec\x81\xa6\xbf\x8d\x0c\x0b\xd7\x9f\x77\x5c\x73\x2d\x5b\x55\x3c\xe8\xad\xa1\x22\x28\x11\xa8\x08\x50\x11\x5a\x5e\x11\xac\x3c\x7f\x7e\x68\xea\xad\x15\xcf\x9f\x1f\x42\x6f\x0d\x24\x55\x22\x40\x52\x20\x69\xcb\x49\x6a\x61\xfa\x0b\x8e\x7b\xdc\x26\x3b\xfe\x02\x40\x2c\x20\x56\x89\x00\x62\x01\xb1\x2d\x47\xac\x95\xe5\x2f\xd0\x99\x1a\xf4\x96\xbf\xe0\x27\xf8\x16\xfe\x03\x96\xbf\xcd\xeb\x7f\x23\x4e\x62\x42\xf3\x04\xa7\x9a\x97\xff\x66\x9c\x2d\x92\x98\xf0\xf2\x6a\xbd\x63\x6c\x9a\x92\x51\xca\x8a\xad\x62\x17\x27\x22\x4b\xf1\xf2\x57\xc6\xe7\x38\x2f\xb3\xbe\x0a\x46\xeb\x30\xa6\x94\xe5\xd5\xeb\x8f\xcb\xc9\x7f\xd4\xba\xa2\x72\x1a\x37\x9b\x61\x3e\x27\xdc\x4d\xd8\x2f\x51\x5a\x88\x9c\xf0\x6e\x2d\xa7\xf1\x26\x67\xdd\x21\x31\x15\x87\xa4\x8b\x9c\x71\x3c\x25\xf2\x21\xab\x23\x9e\x36\x9a\x27\x09\x49\xe3\xe6\x0d\x54\x0b\x2f\x2f\x1a\x5d\x44\x8c\x4e\x92\x69\xb5\x29\xa3\xeb\x87\x9b\xdb\x4f\x1f\xae\x47\xf7\x0f\xef\xdf\x6e\x9d\xbf\x9c\x88\xf1\x79\xf5\x82\xcf\x88\x3c\x64\x9c\x7d\x25\x51\xfe\x90\xc4\xcd\x9c\x6a\xbb\x2e\xab\x8d\x2e\xe3\xf2\x14\x29\x1e\x93\xb4\xde\x7c\x54\xed\x3e\xba\x79\x4e\x46\x72\x76\x42\xb3\xa2\xba\x08\x39\xf9\x2b\x77\x36\x91\xa7\x8e\xe5\x42\xee\xae\x6f\xff\x78\x3f\xba\x7e\x78\x33\x1a\x7d\xfa\xfc\xfb\xbd\x79\x35\x82\xf0\x45\x12\x91\x07\x1c\x45\xac\xa0\xb9\x7e\x49\xab\xa4\x37\xba\x1c\xfd\xba\xee\x9e\x8f\x40\xda\x43\x1a\x8b\xc3\x9c\xe0\xad\x05\x1a\x6e\xed\xc7\x62\x4c\x38\x25\xb9\xee\xb5\xd6\x0b\xc2\xc5\xda\x5a\xe5\x0e\xdd\x5e\x7d\xcf\x12\xba\x90\x6e\xd6\x98\x2c\x56\x5f\x82\x6e\xdd\x5f\x19\x67\xb1\x3a\xfa\x0d\x6f\x7f\x5d\xba\x96\x26\x63\xb2\x71\xf2\x0b\x9b\x93\x4f\x70\x2a\x34\x67\x97\x87\xab\xd3\x57\x83\xcd\xf3\x97\x5b\x72\xf6\xf4\x4f\x00\x00\x00\xff\xff\x28\x74\x7d\x4d\xc2\x86\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 34498, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
