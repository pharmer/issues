// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x6f\xe2\x38\x10\xc7\xdf\xf9\x2b\xac\x3c\x03\xd7\x04\xca\xa2\xbe\x51\xca\xc2\x49\xb7\x2d\xaa\xdb\xdb\x87\xd3\xaa\x72\x93\xd9\x92\x6b\xb0\xb3\xb6\x93\xbb\xee\xaa\xff\xfb\xc9\x06\x12\x70\x7e\x99\x26\xba\x97\x16\x3c\xf6\xcc\x87\x99\xf9\xca\xf2\xfc\xea\x21\xe4\x50\xb2\x05\xe7\x0a\x39\x2c\xdd\x38\x7d\xb5\x00\x34\x15\xce\x15\xfa\xab\x87\x10\x42\x4e\x00\xa9\x5e\x46\xc8\xf9\x41\x0e\x9f\x62\xce\x02\xa7\x87\xd0\x37\x7d\x80\xc3\x4b\xc8\x68\x7e\xe6\x97\xfe\x8b\x90\x13\x31\x9f\xc8\x90\x51\xe5\xfe\x1a\x48\xb2\x21\x9c\xb2\x50\xf4\xd1\x9c\x50\x12\x1c\xbc\x65\x1e\xd4\xb6\x5b\xc6\xe5\x06\xcd\xb6\xc0\x43\xff\x68\xc3\x4f\x46\x21\x0f\xa0\x97\xae\x57\xd8\x75\xf6\x5f\xbf\xe9\xff\xef\xfd\xea\xf0\x4b\x4e\x52\x88\x42\x0a\xa2\x8f\x3e\x73\x42\x7d\x28\x8b\xfe\x15\x84\x04\x4e\xd1\x22\xe1\x2c\x86\xda\xf0\xcb\xfb\xd9\x19\xe1\xb1\xe4\x44\x3c\xb3\x84\xbf\xd4\x85\x9f\x03\x95\x9c\x44\x36\xe1\xf1\xf5\xd2\x0c\x9f\xd5\x23\xa4\x42\xaa\x10\x0f\x6f\x31\x94\x54\x45\xbc\x26\x2a\x58\x1a\x8b\x81\x10\xc1\xc0\xcd\xe3\x04\x20\x7c\x1e\xc6\x07\x68\x17\xa5\x73\xc6\x55\xc6\x46\x43\x77\xb9\xf9\x99\x6f\xf4\x89\x84\x17\xc6\xdf\xd4\xae\x3f\xd7\x18\xcd\x23\x96\x04\x47\xe6\x58\x45\x70\xf3\x5f\x48\xb6\xce\x15\xf2\xf2\x38\xa1\x78\x55\x0b\x97\xa5\x79\x33\xf8\xbc\x4a\x3e\xaf\x1d\x9f\x67\xf0\x8d\x4d\xbe\xcb\x0b\x1b\xbe\x51\x25\xdf\xb8\x1d\xdf\xd8\xe0\x9b\x9a\x7c\xee\x45\x2d\xa0\x72\x8c\xf1\x0d\xb2\x29\xb0\x37\x1c\xd7\x02\x62\x7c\x73\x76\x79\x5d\x2b\xba\xea\xf2\x76\x4a\x57\x28\xae\x67\x45\x57\x5d\x5c\xaf\x0d\x9d\xd9\x7a\x85\xd2\x8e\x1b\xe9\xe6\x7f\xdc\x3d\xde\xa0\xfb\xd9\x97\x4e\xea\xab\x1b\x50\x79\x6b\xca\xe3\xe4\x3c\x11\x9f\x92\xda\x48\xf9\xc3\xa4\x66\x4e\xdd\x42\x43\xd6\xeb\xf9\x14\xd5\x46\xd5\x1f\x46\x35\x95\xed\x15\xba\xb3\x41\xda\x8b\xe5\xe0\x93\x55\x2e\x47\x95\x80\xeb\xe4\x39\x0a\xfd\x3d\x23\x06\x9e\x02\x17\x4d\x29\xfd\x54\x14\x51\x13\xa6\x7b\x69\x95\xc8\x76\x9c\x66\x3e\xdd\xcb\xa2\x9e\x9a\x40\x47\x17\x95\xa0\xd3\xce\x40\xa7\x06\xe8\xe8\xc2\x04\x9d\x36\x82\x4e\xaa\x41\xdd\x49\x67\xa4\xee\xc4\x14\x7e\x01\xd5\x9d\x34\x57\xdf\xab\x86\x1d\x75\xd7\xa7\xa3\xa2\xf6\xcf\xa6\x5d\xd9\x49\xaa\xee\x26\xff\x3f\x24\xb5\xb2\x94\x54\x5b\xce\xd6\x92\x5a\x59\x4a\xaa\x2d\x68\x6b\x49\xad\x6c\x25\xd5\x96\xb4\x03\x49\xad\xac\x25\xd5\x16\xb6\x0b\x49\xe1\x75\x5d\x0b\xd8\x5d\xf9\x1f\xd1\x54\xb1\x05\x1a\x44\x85\xd7\x75\x2d\x60\x77\xe1\x7f\x44\x54\xc5\x06\x68\x10\x15\x5e\xd7\xd6\x7f\xda\x19\xa9\xa9\xaa\x92\xea\x37\xc8\x0a\xaf\x07\xde\xd8\xf2\xaa\xea\x96\xd5\x1b\xd7\x74\x6a\xf6\x48\xf6\x39\x04\x40\x65\x48\xa2\x92\x27\x72\xcc\x59\x1a\x06\xc0\x15\xc2\xdd\x7e\x2e\x72\xf0\x17\x47\xe4\xed\x33\xe3\x5b\x22\x95\xf5\x7b\x08\xd1\xd1\xcb\x8d\x50\xca\xa4\x7e\xf5\x2b\xaf\x07\x7f\x2a\x9c\xfa\x05\xc3\x78\x43\xf8\x16\xf8\x30\x64\xbf\xf9\x51\x22\x24\xf0\x41\xce\xa1\xdc\x1d\x9e\xf4\xef\x99\x47\x1d\xe0\xf4\xf1\x9f\xbb\xdd\x4d\x6b\x7c\x46\xbf\x87\x2f\x9a\x15\x3f\x3d\xe2\xc5\xfd\xed\xec\xcb\x22\x63\xda\x79\x61\x7c\xab\x87\x3c\xe2\x29\x11\xc0\xf5\xcc\xe7\x64\xc3\xdf\x62\x57\x97\x72\x6b\x44\x9e\x41\xf3\x3d\x96\x9a\x43\x1a\x27\x3a\x1b\x12\xfe\x95\x4e\x66\x79\xef\xdb\x21\xaf\x67\x18\x7f\xbd\xbb\xbf\xa9\x44\x8e\x89\x10\xff\x30\x1e\x94\x23\x97\x5b\x33\xe4\x75\xa9\x39\x43\xce\x4e\x9f\x8d\xfd\xb0\xb8\x9d\xdd\x3e\x3c\xfd\x5e\xcd\x2d\x81\x12\x2a\x9f\xc2\x0a\xf0\x9d\xd9\x3c\x9f\x81\x3f\x68\x33\x32\xed\x55\xc9\xde\x7f\x32\x87\x41\xaf\xc9\x33\x70\x0a\xb2\x6c\x12\xa4\xd4\x74\xd0\xe3\x70\x3a\xac\x51\xeb\xa9\x75\x3f\x21\x3c\x6a\xef\x00\x52\xe7\x0a\x49\x9e\x40\xce\xea\xfc\x20\xc5\x35\x3d\x39\xdc\xad\xf6\x8e\xc1\x35\x70\xef\xfd\xbf\x00\x00\x00\xff\xff\xea\xa1\x62\xc2\x92\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5266, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
