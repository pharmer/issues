// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9c\xdd\x6e\xdb\xbc\x19\xc7\xcf\x73\x15\x82\x8f\x1b\x2d\x92\x3f\xf2\x71\x56\x64\xe9\x50\x74\x45\x8b\xb9\xdd\x30\x0c\x45\x40\x4b\xb4\xad\x45\x12\x55\x4a\x4e\xe2\x16\xb9\x9a\x5d\xca\x6e\xec\x85\x15\x5b\x96\xc9\x47\xfc\x8b\x60\xd5\xf7\x3d\x78\x1b\x50\x7f\x4b\x3f\x92\xcf\x17\x49\xcb\x3f\xcf\x3c\x6f\x94\xb3\x8c\x8f\x6e\xbc\x11\x7b\x2a\x47\x6f\x76\x0d\x3c\x7f\x2c\x47\x37\xde\x7f\xce\x3c\xcf\xf3\x46\x31\x7f\xac\x9b\x3d\x6f\xf4\x9d\x1d\xfe\x2a\xa4\x88\x47\x67\x9e\xf7\xad\xfe\x80\xe4\xab\x44\xe4\xc7\xcf\xfc\xac\xff\xef\x79\xa3\x54\x44\xac\x4a\x44\xbe\xbb\xfd\x17\xf1\xb0\x15\xfb\xcf\x37\x9f\xa9\x9f\x5b\x9c\xe7\x42\x56\x6b\xce\xca\xea\x3c\x38\x2a\x7e\x88\x9c\x1f\xef\x59\x37\x9d\x4a\x59\xa3\xd5\x2e\x45\xdd\x97\x6a\xee\xdd\x7f\xdf\xea\x7f\x5f\xde\x74\x23\x43\xda\xb0\x3f\x6d\xd8\x4d\x1b\x46\xfd\x91\x3e\x6e\xb2\x05\x4b\x3a\xc0\x4a\xb1\xa9\xd6\x78\x08\xf7\x32\x15\x68\xdf\xbc\xe8\x0f\x33\x4f\xf2\x15\x2b\x84\xe4\x26\x9e\x7e\xd3\xda\x92\x92\x5c\xaf\x97\x16\xdd\x97\x2c\xc6\x70\xbe\x8d\x73\xbe\x85\xcc\x70\x72\x5b\xd2\x6e\xe6\xb0\x9b\xd9\x66\xde\x29\xda\x88\x9d\x47\x3c\xaf\x24\x4b\xc1\xf8\xb6\x85\x27\xa4\xed\x0b\x16\xf3\xfe\x4e\xb2\xfc\x61\xb9\x91\x15\x45\xc5\x37\x3d\xa9\xda\xc2\x13\xaa\xf6\x85\x45\xd7\x05\x8b\xb1\x7b\x2f\x79\xca\xf2\xb8\x03\xf6\x89\x43\xfb\x6c\x54\x2a\xe6\x6b\xab\xca\xf8\xda\x6a\x01\xf8\x77\x91\xc7\x22\x37\xf1\x99\x6d\xb1\x51\x91\x7c\x21\xc9\xe7\x6a\x7c\x87\xfb\x8c\x7b\x91\x8d\x49\xb2\x31\x49\x36\xb6\x71\xe5\xff\xff\x4f\x78\x9f\xd9\x26\x25\x33\x4b\xc9\xce\x7b\x44\x9f\x46\x75\xc2\xd8\xb4\x2e\xc8\x56\x0b\xc6\x7f\x26\x72\x95\xe4\x09\xa3\x08\x37\x65\x1f\xc2\x46\x75\x42\xd8\xb4\x2e\xc8\xd6\x88\x6c\x8d\xc9\x56\x4e\xb6\x2e\xfb\xf7\xf1\xd3\x3a\x21\x67\xe0\x70\x2f\xb3\xfd\x36\x2a\xb2\x7f\x21\xd9\x3f\x1b\xfb\xbd\x65\x69\xb2\x14\xb2\x7b\x0e\x7a\xc4\x80\x46\xa5\x32\x1e\x62\x40\xff\xb1\x92\x7c\x45\x7b\xfb\xe1\x6e\x70\xb4\x08\x6f\x6f\x5a\xd5\xd1\xa2\xbd\xbd\xa9\xdd\x92\xbc\xac\x58\x1e\xf1\x2f\xdb\x82\x13\x15\x5c\xf9\xb0\xa9\x53\x4d\xe0\x67\x3c\x4e\x36\xd9\x91\x2c\xe6\x65\x24\x93\xe2\xd0\x2b\x42\x11\xb1\x8a\xaf\x84\xdc\xd6\x53\x20\xb2\x62\x53\x71\x4f\x14\x55\x92\x25\x3f\x78\x2b\x1a\x47\xc5\xee\x11\xe1\x71\x3c\x58\x36\xba\xf1\x02\xff\x92\x1c\xc9\x23\xd0\x73\xca\xe4\x8a\x9b\x80\x54\x85\x15\xd0\x95\x02\x64\xc6\x19\xfb\x21\xe2\x21\x24\x4e\x40\xc1\x14\x10\x4d\x30\x91\x26\xb1\x22\x0a\x66\x0a\xd2\xf8\x02\x20\x5d\x61\x24\x4d\x62\x85\x34\x56\xed\x68\x86\x90\x20\x90\x0b\x8e\x4a\x33\xf6\x2f\xd1\xac\xe1\x11\x72\x1a\xa0\x89\x6a\xd6\xbe\x19\x68\x82\x0d\x9b\x90\x0c\x69\xd8\x13\x6c\xd8\x84\x64\x50\xc3\x9e\x60\xc3\x26\x24\x76\x86\xad\x22\x01\xc3\x9e\x20\xc3\xd6\x04\xc3\x1a\xf6\x04\x1a\xb6\xae\x18\xd4\xb0\xa7\x7e\x00\x27\x8d\xd2\x58\x41\x5d\x6a\x69\x6d\x32\x01\x54\xd0\xdd\x08\x89\x9b\xbb\xcd\x00\x11\x74\x37\x42\xe2\xe8\x6e\x21\x40\xba\xc6\x48\x9a\xc4\xcd\xdd\x2e\x11\x12\x04\xfa\x95\xee\x86\x8c\x08\x0f\xcf\x2f\xf5\xb5\x2b\x23\x4e\x14\xe2\xf0\x48\x69\x5c\x13\x3f\x08\x00\xab\x00\x5b\x36\xa5\x69\x63\xfd\xed\xf3\x57\xef\x50\x41\x97\xd0\xac\xc3\x10\x20\xc9\x00\x8f\x14\xa5\x69\x23\x7d\xe4\x99\x90\x5b\x8b\x81\x0a\xcd\x21\x29\x0e\x61\x48\xa2\x24\x6d\xa4\x79\x25\x24\x5b\x59\x84\xa4\x59\x00\x88\xd0\xc4\x51\x12\x2b\x22\x6d\xee\x82\xd0\x18\x00\x62\x6c\xe3\x94\xc4\x8a\x49\x8b\x49\x78\xe6\x30\x92\x13\x91\x1a\x07\xc6\xc0\xe7\x96\x81\x1f\xcc\x00\x13\xa9\x69\x53\xbd\x8d\x22\x9e\x72\xc9\x2a\x1e\x7b\x51\x1d\x16\x92\x7c\xa5\x92\xcd\x54\xb4\xeb\x4b\x63\x9a\x5b\x06\xd0\xca\x29\x89\x35\x97\x96\x7c\xcd\x66\xb5\xc2\xce\x47\x49\xd4\x10\xf5\xe9\xd7\x94\xde\x2b\x6c\xe4\x94\xa4\x37\x8d\xe5\xe2\x6d\x35\xc6\xd6\x44\x6a\xdc\xad\x69\x72\x65\x4c\x79\x2b\xbc\xf8\xa6\x24\xd6\x5c\xb6\x51\x6a\x85\x57\xe0\x94\xc4\x9a\xcb\x36\xc7\xac\x7b\xc4\x05\x52\x63\x15\xad\xb4\x59\x0c\xa7\xc6\x98\xb0\xc6\x31\x81\x92\x38\x65\x3e\x73\xe5\xbb\xc6\x25\x0b\x25\x71\xcb\x7c\x33\x34\x75\xc8\xa4\x28\x89\x5d\xe2\xd3\x56\x51\xa1\xd1\xfd\xd6\x65\x0f\x28\x4a\xe3\x58\x22\x04\xc6\x3d\xc2\x04\xc7\x72\x4a\x32\x60\x21\x95\xe0\x42\x8a\x92\x0c\x5a\x48\x25\x38\xc7\x50\x12\x37\x7b\x02\xe1\x29\x81\x85\x14\xa1\x18\xb4\x90\x4a\x7a\xa4\x3e\x52\xe3\x16\x30\x41\xda\x4b\xf0\x2e\x38\x25\x19\xd2\xc2\x71\x22\xa6\x24\xc3\x5a\x38\x4e\xc2\x94\x64\x58\x0b\x47\xfb\xe0\xba\xc0\x8a\x47\x0b\xe0\x53\x3f\x44\x06\x9e\xf1\x8a\xa5\x26\x20\x45\xd0\x06\xfa\x9a\x3f\xe4\xe2\x29\x57\x31\xce\x03\x85\x63\x1a\xa0\xa9\xc2\x33\xf5\x5b\x1d\x3f\x0b\xc0\x44\xe9\x82\x93\xf2\x9b\xe7\x5c\xb2\xd4\x2b\x36\xb2\x10\x25\x47\xd3\x04\xf6\x50\x33\x78\x2a\x48\x28\x2c\x70\xd4\xd9\x42\x9b\xcc\x59\xe0\x97\x19\x4b\xbb\x8d\x46\x17\x38\xd0\x80\x13\xca\x0c\x9e\x50\x12\x0a\x0b\x1c\xd5\x72\xcc\x4b\xb7\x0c\x17\x1f\x94\xc4\x66\x63\x49\x33\xe5\x89\x6f\x74\xae\x0c\x57\x1f\x94\xc4\x06\x49\x4b\x16\x57\xbe\x31\x0c\x66\x30\xd1\x13\x0a\x1b\x20\x2d\x0e\x5e\xfa\xc6\xfc\x95\xe1\x8c\x4a\x49\x2c\xcc\x48\x5b\x80\x18\x97\xdc\x19\xca\x13\xba\x60\xc0\xf0\x33\x86\xe1\x47\x57\x0c\x19\x7e\x60\xb6\x20\x14\xc3\x79\xfc\xc4\x0f\x2e\x10\x0f\xa5\xb1\x21\xba\x50\x91\xcc\x3b\x36\xbb\xe7\xa1\xb2\x95\xd4\x58\x30\xd9\xae\xf2\x33\x7c\xc2\x4d\x49\x5c\x5c\xcc\x1c\x16\xf1\xf9\x36\x25\xb1\xb1\x6b\xbb\x15\x7e\x86\x8e\x92\x75\x81\x83\xcf\x1b\x17\x18\x19\x3c\x45\x26\x14\x2e\x1e\x66\xb6\x9c\xa9\x1f\x40\xd3\xa1\x34\x36\x44\xda\x0e\xed\xb5\xd9\x7a\xa6\x7e\x08\xcd\x87\xd2\x58\x30\x5d\x6b\xc7\xb5\x57\x66\x03\xc2\x87\xda\x94\x64\x38\x0f\xc3\x47\xda\x94\x64\x40\x0f\x43\xa7\xc7\xba\x60\x30\x0f\x83\x67\xc7\x84\x62\x30\x0f\x2b\x42\x9c\x2f\x48\x8d\xfb\x0e\xff\xa5\xd9\x86\x0a\xbc\x4d\x45\x49\xdc\x77\xd2\xc1\x16\x4c\x01\x2b\x58\x42\x61\x4d\xa5\x0e\x96\x79\x13\xa6\xe8\xb1\x59\x45\x6a\x06\x3f\xa7\x29\x70\x79\x4d\x49\x9c\x4f\xfd\xe0\x78\x41\xdb\xfa\x33\x4e\x69\x24\x1e\x2d\x4a\xe2\xb4\x60\x33\x0e\x94\xc4\xbb\x7b\x94\xc4\x06\xc8\x76\x73\x4f\xe2\xb9\xa3\x24\x43\x7e\x81\x43\xa2\x35\x9b\x2e\x70\x5a\xd2\xa2\xad\x3d\x09\x97\x49\x84\xc2\x69\x23\x02\xec\xa9\xc9\x1e\xab\x12\x52\x63\x03\x65\x1b\x9a\x24\x5e\x96\x50\x92\x01\x9d\x0d\xaf\x4b\x28\xc9\xa0\xce\x86\xbf\x77\x4b\x49\x06\x75\x36\xb4\x58\xd2\x05\xc3\x3a\x1b\x5c\x31\x11\x8a\x21\x9d\xad\x0a\xfc\x2c\x89\xa4\xe8\xe4\xd1\x05\x27\x38\xca\x25\x72\xa3\xe6\xc2\x9f\x05\x63\x23\x04\xde\x0d\xa5\x24\x83\xad\x48\xaa\x10\x58\x8d\x2e\x18\x6a\x01\x50\x85\x68\x53\x8d\x50\x38\xc0\x18\xbd\x69\xf7\x28\xb3\xb1\x68\x02\x97\x0d\x7d\x80\x92\xb3\xdc\x48\x72\x7a\xdd\x01\x04\xb9\x50\x08\x8e\x39\x74\x81\x03\x0c\x32\x5c\xec\x47\xbf\x6d\xb9\xf8\xdc\xe3\x6b\x44\xa4\xc6\x29\x91\x83\x6f\x16\x3e\x07\xfe\x18\x05\x1b\x52\x63\x95\x39\x43\x7d\x9f\x68\x6a\x9c\xb9\xe7\x80\xf7\x19\x2c\x4a\xe4\x34\x5a\x7d\xb8\xf0\x70\x11\x1a\x97\xca\x07\x24\xf5\xdd\xf3\x7a\xcc\x21\x25\x72\x9b\xc4\xf1\xf5\x05\x04\x43\x45\x19\xa9\x71\xaa\xca\x40\xe5\xba\x7b\x20\x2a\xcb\x48\x8d\x53\x5d\x06\xbd\x90\xa3\x48\x45\x49\x5c\x2a\xa1\xa6\x78\x6d\xde\xb5\x8d\x24\x8f\x79\x5e\x25\x2c\x25\xde\xb4\x2d\xa4\x78\x4c\x62\x2e\xeb\xe5\xfb\xbf\xe6\x2d\xcc\xa4\x2c\x52\xb6\x7d\x27\x64\xc6\xaa\xdd\xd5\x65\xc2\xd3\xd6\xd3\x59\x9e\x8b\xaa\x7e\xbb\x78\x77\xd7\xc3\xfd\x76\x8f\x4b\xc5\x26\xf6\x8b\x35\x93\x19\x97\x7e\x22\xfe\x12\xa5\x9b\xb2\xe2\xf2\xfc\xc8\x31\x6a\xbf\xdd\x4f\x7d\x24\xce\x4b\x1b\x79\xf9\xfa\x7d\x07\xf5\x23\xfb\x4f\xbc\x34\xcc\x75\x17\x4e\xdf\x6b\x3e\x82\xbf\xfe\x04\x4d\x24\xf2\x65\xb2\xda\x8f\xc6\xfd\xdb\xdb\xdb\xbb\xf9\xfc\xfe\xc3\xdd\xbf\xef\xdf\xff\xb5\x85\xb0\xbb\x97\x90\xbb\xe1\x1e\xb1\xa7\xf2\x9e\x45\x11\x2f\xcb\xfb\x07\xbe\xbd\x4f\xe2\x53\xd9\x7f\xcb\xfd\x6f\x7c\xd4\x92\x0f\x7c\xab\xde\x27\x65\x0b\x9e\x1e\x36\x4f\xca\xd2\xfb\xc0\xb7\xde\x7b\xe5\x26\x49\x5e\x6c\xea\x39\xa8\xf8\x73\x35\x6a\xae\xbc\xbc\xe9\xd9\x8d\xf9\xdd\xed\x3f\xee\xbe\xb4\x7a\xd3\xdd\x95\x92\x47\x92\x57\xad\x1e\xd1\xdd\x79\x95\xbd\x3d\x74\xaa\xa3\x4b\xf3\x5a\xe5\x1d\x7b\xd6\xd1\xad\x82\x95\xe5\x93\x90\x71\xab\x6b\xfb\xbf\xd4\xf7\xc6\x1f\x36\x0b\x2e\x73\x5e\x51\x2f\x8d\x3f\x72\x59\xee\x9d\x2a\xf0\xaf\xfc\x8b\xa3\xad\xee\x7f\x5a\xa8\x65\xa4\x31\x7f\x1c\xdd\x78\x95\xdc\xf0\x96\x5d\xd5\x3f\x2f\xa4\xb5\x7e\x67\xfb\xb6\xb3\x36\x9a\xea\xf0\x27\x0f\xbf\xee\xf3\xf0\x25\x4b\x4b\xe2\xe9\x6a\x73\xfd\xf8\xba\xf1\xf4\xf9\xbb\x21\x39\x7b\xf9\x23\x00\x00\xff\xff\x56\x36\x2c\xb7\x4b\x49\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18763, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
